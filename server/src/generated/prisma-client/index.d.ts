// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  category: (where?: CategoryWhereInput) => Promise<boolean>;
  customer: (where?: CustomerWhereInput) => Promise<boolean>;
  inventory: (where?: InventoryWhereInput) => Promise<boolean>;
  inventoryItem: (where?: InventoryItemWhereInput) => Promise<boolean>;
  inventoryItemTransaction: (
    where?: InventoryItemTransactionWhereInput
  ) => Promise<boolean>;
  product: (where?: ProductWhereInput) => Promise<boolean>;
  sale: (where?: SaleWhereInput) => Promise<boolean>;
  saleItem: (where?: SaleItemWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  category: (where: CategoryWhereUniqueInput) => CategoryNullablePromise;
  categories: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Category>;
  categoriesConnection: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CategoryConnectionPromise;
  customer: (where: CustomerWhereUniqueInput) => CustomerNullablePromise;
  customers: (args?: {
    where?: CustomerWhereInput;
    orderBy?: CustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Customer>;
  customersConnection: (args?: {
    where?: CustomerWhereInput;
    orderBy?: CustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CustomerConnectionPromise;
  inventory: (where: InventoryWhereUniqueInput) => InventoryNullablePromise;
  inventories: (args?: {
    where?: InventoryWhereInput;
    orderBy?: InventoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Inventory>;
  inventoriesConnection: (args?: {
    where?: InventoryWhereInput;
    orderBy?: InventoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => InventoryConnectionPromise;
  inventoryItem: (
    where: InventoryItemWhereUniqueInput
  ) => InventoryItemNullablePromise;
  inventoryItems: (args?: {
    where?: InventoryItemWhereInput;
    orderBy?: InventoryItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<InventoryItem>;
  inventoryItemsConnection: (args?: {
    where?: InventoryItemWhereInput;
    orderBy?: InventoryItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => InventoryItemConnectionPromise;
  inventoryItemTransaction: (
    where: InventoryItemTransactionWhereUniqueInput
  ) => InventoryItemTransactionNullablePromise;
  inventoryItemTransactions: (args?: {
    where?: InventoryItemTransactionWhereInput;
    orderBy?: InventoryItemTransactionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<InventoryItemTransaction>;
  inventoryItemTransactionsConnection: (args?: {
    where?: InventoryItemTransactionWhereInput;
    orderBy?: InventoryItemTransactionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => InventoryItemTransactionConnectionPromise;
  product: (where: ProductWhereUniqueInput) => ProductNullablePromise;
  products: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Product>;
  productsConnection: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductConnectionPromise;
  sale: (where: SaleWhereUniqueInput) => SaleNullablePromise;
  sales: (args?: {
    where?: SaleWhereInput;
    orderBy?: SaleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Sale>;
  salesConnection: (args?: {
    where?: SaleWhereInput;
    orderBy?: SaleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SaleConnectionPromise;
  saleItem: (where: SaleItemWhereUniqueInput) => SaleItemNullablePromise;
  saleItems: (args?: {
    where?: SaleItemWhereInput;
    orderBy?: SaleItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SaleItem>;
  saleItemsConnection: (args?: {
    where?: SaleItemWhereInput;
    orderBy?: SaleItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SaleItemConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCategory: (data: CategoryCreateInput) => CategoryPromise;
  updateCategory: (args: {
    data: CategoryUpdateInput;
    where: CategoryWhereUniqueInput;
  }) => CategoryPromise;
  updateManyCategories: (args: {
    data: CategoryUpdateManyMutationInput;
    where?: CategoryWhereInput;
  }) => BatchPayloadPromise;
  upsertCategory: (args: {
    where: CategoryWhereUniqueInput;
    create: CategoryCreateInput;
    update: CategoryUpdateInput;
  }) => CategoryPromise;
  deleteCategory: (where: CategoryWhereUniqueInput) => CategoryPromise;
  deleteManyCategories: (where?: CategoryWhereInput) => BatchPayloadPromise;
  createCustomer: (data: CustomerCreateInput) => CustomerPromise;
  updateCustomer: (args: {
    data: CustomerUpdateInput;
    where: CustomerWhereUniqueInput;
  }) => CustomerPromise;
  updateManyCustomers: (args: {
    data: CustomerUpdateManyMutationInput;
    where?: CustomerWhereInput;
  }) => BatchPayloadPromise;
  upsertCustomer: (args: {
    where: CustomerWhereUniqueInput;
    create: CustomerCreateInput;
    update: CustomerUpdateInput;
  }) => CustomerPromise;
  deleteCustomer: (where: CustomerWhereUniqueInput) => CustomerPromise;
  deleteManyCustomers: (where?: CustomerWhereInput) => BatchPayloadPromise;
  createInventory: (data: InventoryCreateInput) => InventoryPromise;
  updateInventory: (args: {
    data: InventoryUpdateInput;
    where: InventoryWhereUniqueInput;
  }) => InventoryPromise;
  updateManyInventories: (args: {
    data: InventoryUpdateManyMutationInput;
    where?: InventoryWhereInput;
  }) => BatchPayloadPromise;
  upsertInventory: (args: {
    where: InventoryWhereUniqueInput;
    create: InventoryCreateInput;
    update: InventoryUpdateInput;
  }) => InventoryPromise;
  deleteInventory: (where: InventoryWhereUniqueInput) => InventoryPromise;
  deleteManyInventories: (where?: InventoryWhereInput) => BatchPayloadPromise;
  createInventoryItem: (data: InventoryItemCreateInput) => InventoryItemPromise;
  updateInventoryItem: (args: {
    data: InventoryItemUpdateInput;
    where: InventoryItemWhereUniqueInput;
  }) => InventoryItemPromise;
  updateManyInventoryItems: (args: {
    data: InventoryItemUpdateManyMutationInput;
    where?: InventoryItemWhereInput;
  }) => BatchPayloadPromise;
  upsertInventoryItem: (args: {
    where: InventoryItemWhereUniqueInput;
    create: InventoryItemCreateInput;
    update: InventoryItemUpdateInput;
  }) => InventoryItemPromise;
  deleteInventoryItem: (
    where: InventoryItemWhereUniqueInput
  ) => InventoryItemPromise;
  deleteManyInventoryItems: (
    where?: InventoryItemWhereInput
  ) => BatchPayloadPromise;
  createInventoryItemTransaction: (
    data: InventoryItemTransactionCreateInput
  ) => InventoryItemTransactionPromise;
  updateInventoryItemTransaction: (args: {
    data: InventoryItemTransactionUpdateInput;
    where: InventoryItemTransactionWhereUniqueInput;
  }) => InventoryItemTransactionPromise;
  updateManyInventoryItemTransactions: (args: {
    data: InventoryItemTransactionUpdateManyMutationInput;
    where?: InventoryItemTransactionWhereInput;
  }) => BatchPayloadPromise;
  upsertInventoryItemTransaction: (args: {
    where: InventoryItemTransactionWhereUniqueInput;
    create: InventoryItemTransactionCreateInput;
    update: InventoryItemTransactionUpdateInput;
  }) => InventoryItemTransactionPromise;
  deleteInventoryItemTransaction: (
    where: InventoryItemTransactionWhereUniqueInput
  ) => InventoryItemTransactionPromise;
  deleteManyInventoryItemTransactions: (
    where?: InventoryItemTransactionWhereInput
  ) => BatchPayloadPromise;
  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (args: {
    data: ProductUpdateInput;
    where: ProductWhereUniqueInput;
  }) => ProductPromise;
  updateManyProducts: (args: {
    data: ProductUpdateManyMutationInput;
    where?: ProductWhereInput;
  }) => BatchPayloadPromise;
  upsertProduct: (args: {
    where: ProductWhereUniqueInput;
    create: ProductCreateInput;
    update: ProductUpdateInput;
  }) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;
  createSale: (data: SaleCreateInput) => SalePromise;
  updateSale: (args: {
    data: SaleUpdateInput;
    where: SaleWhereUniqueInput;
  }) => SalePromise;
  updateManySales: (args: {
    data: SaleUpdateManyMutationInput;
    where?: SaleWhereInput;
  }) => BatchPayloadPromise;
  upsertSale: (args: {
    where: SaleWhereUniqueInput;
    create: SaleCreateInput;
    update: SaleUpdateInput;
  }) => SalePromise;
  deleteSale: (where: SaleWhereUniqueInput) => SalePromise;
  deleteManySales: (where?: SaleWhereInput) => BatchPayloadPromise;
  createSaleItem: (data: SaleItemCreateInput) => SaleItemPromise;
  updateSaleItem: (args: {
    data: SaleItemUpdateInput;
    where: SaleItemWhereUniqueInput;
  }) => SaleItemPromise;
  updateManySaleItems: (args: {
    data: SaleItemUpdateManyMutationInput;
    where?: SaleItemWhereInput;
  }) => BatchPayloadPromise;
  upsertSaleItem: (args: {
    where: SaleItemWhereUniqueInput;
    create: SaleItemCreateInput;
    update: SaleItemUpdateInput;
  }) => SaleItemPromise;
  deleteSaleItem: (where: SaleItemWhereUniqueInput) => SaleItemPromise;
  deleteManySaleItems: (where?: SaleItemWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  category: (
    where?: CategorySubscriptionWhereInput
  ) => CategorySubscriptionPayloadSubscription;
  customer: (
    where?: CustomerSubscriptionWhereInput
  ) => CustomerSubscriptionPayloadSubscription;
  inventory: (
    where?: InventorySubscriptionWhereInput
  ) => InventorySubscriptionPayloadSubscription;
  inventoryItem: (
    where?: InventoryItemSubscriptionWhereInput
  ) => InventoryItemSubscriptionPayloadSubscription;
  inventoryItemTransaction: (
    where?: InventoryItemTransactionSubscriptionWhereInput
  ) => InventoryItemTransactionSubscriptionPayloadSubscription;
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  sale: (
    where?: SaleSubscriptionWhereInput
  ) => SaleSubscriptionPayloadSubscription;
  saleItem: (
    where?: SaleItemSubscriptionWhereInput
  ) => SaleItemSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Permission =
  | "ADMIN"
  | "PRODUCT"
  | "SALES"
  | "EXPENSE"
  | "INVENTORY"
  | "CUSTOMER"
  | "PERMISSIONUPDATE";

export type InventoryItemTransactionAction =
  | "MANUALLY"
  | "ADDED"
  | "DEDUCTED"
  | "SALE"
  | "DEDUCTION";

export type SpecialSaleDeductionType = "FLAT" | "PERCENTAGE";

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "salePrice_ASC"
  | "salePrice_DESC"
  | "costPrice_ASC"
  | "costPrice_DESC"
  | "unit_ASC"
  | "unit_DESC"
  | "currency_ASC"
  | "currency_DESC"
  | "notes_ASC"
  | "notes_DESC"
  | "sku_ASC"
  | "sku_DESC"
  | "image_ASC"
  | "image_DESC"
  | "largeImage_ASC"
  | "largeImage_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type InventoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type InventoryItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "amount_ASC"
  | "amount_DESC";

export type InventoryItemTransactionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "action_ASC"
  | "action_DESC"
  | "comment_ASC"
  | "comment_DESC"
  | "dateTime_ASC"
  | "dateTime_DESC";

export type CustomerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "street1_ASC"
  | "street1_DESC"
  | "street2_ASC"
  | "street2_DESC"
  | "city_ASC"
  | "city_DESC"
  | "state_ASC"
  | "state_DESC"
  | "zipCode_ASC"
  | "zipCode_DESC"
  | "country_ASC"
  | "country_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SaleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "timestamp_ASC"
  | "timestamp_DESC"
  | "discountType_ASC"
  | "discountType_DESC"
  | "discountValue_ASC"
  | "discountValue_DESC"
  | "taxType_ASC"
  | "taxType_DESC"
  | "taxValue_ASC"
  | "taxValue_DESC"
  | "shipping_ASC"
  | "shipping_DESC"
  | "note_ASC"
  | "note_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SaleItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "quantity_ASC"
  | "quantity_DESC"
  | "discountType_ASC"
  | "discountType_DESC"
  | "discountValue_ASC"
  | "discountValue_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "role_ASC"
  | "role_DESC"
  | "verified_ASC"
  | "verified_DESC"
  | "name_ASC"
  | "name_DESC"
  | "confirmEmailToken_ASC"
  | "confirmEmailToken_DESC"
  | "resetToken_ASC"
  | "resetToken_DESC"
  | "resetTokenExpiry_ASC"
  | "resetTokenExpiry_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CategoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ProductWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  salePrice?: Maybe<String>;
  salePrice_not?: Maybe<String>;
  salePrice_in?: Maybe<String[] | String>;
  salePrice_not_in?: Maybe<String[] | String>;
  salePrice_lt?: Maybe<String>;
  salePrice_lte?: Maybe<String>;
  salePrice_gt?: Maybe<String>;
  salePrice_gte?: Maybe<String>;
  salePrice_contains?: Maybe<String>;
  salePrice_not_contains?: Maybe<String>;
  salePrice_starts_with?: Maybe<String>;
  salePrice_not_starts_with?: Maybe<String>;
  salePrice_ends_with?: Maybe<String>;
  salePrice_not_ends_with?: Maybe<String>;
  costPrice?: Maybe<String>;
  costPrice_not?: Maybe<String>;
  costPrice_in?: Maybe<String[] | String>;
  costPrice_not_in?: Maybe<String[] | String>;
  costPrice_lt?: Maybe<String>;
  costPrice_lte?: Maybe<String>;
  costPrice_gt?: Maybe<String>;
  costPrice_gte?: Maybe<String>;
  costPrice_contains?: Maybe<String>;
  costPrice_not_contains?: Maybe<String>;
  costPrice_starts_with?: Maybe<String>;
  costPrice_not_starts_with?: Maybe<String>;
  costPrice_ends_with?: Maybe<String>;
  costPrice_not_ends_with?: Maybe<String>;
  unit?: Maybe<String>;
  unit_not?: Maybe<String>;
  unit_in?: Maybe<String[] | String>;
  unit_not_in?: Maybe<String[] | String>;
  unit_lt?: Maybe<String>;
  unit_lte?: Maybe<String>;
  unit_gt?: Maybe<String>;
  unit_gte?: Maybe<String>;
  unit_contains?: Maybe<String>;
  unit_not_contains?: Maybe<String>;
  unit_starts_with?: Maybe<String>;
  unit_not_starts_with?: Maybe<String>;
  unit_ends_with?: Maybe<String>;
  unit_not_ends_with?: Maybe<String>;
  currency?: Maybe<String>;
  currency_not?: Maybe<String>;
  currency_in?: Maybe<String[] | String>;
  currency_not_in?: Maybe<String[] | String>;
  currency_lt?: Maybe<String>;
  currency_lte?: Maybe<String>;
  currency_gt?: Maybe<String>;
  currency_gte?: Maybe<String>;
  currency_contains?: Maybe<String>;
  currency_not_contains?: Maybe<String>;
  currency_starts_with?: Maybe<String>;
  currency_not_starts_with?: Maybe<String>;
  currency_ends_with?: Maybe<String>;
  currency_not_ends_with?: Maybe<String>;
  notes?: Maybe<String>;
  notes_not?: Maybe<String>;
  notes_in?: Maybe<String[] | String>;
  notes_not_in?: Maybe<String[] | String>;
  notes_lt?: Maybe<String>;
  notes_lte?: Maybe<String>;
  notes_gt?: Maybe<String>;
  notes_gte?: Maybe<String>;
  notes_contains?: Maybe<String>;
  notes_not_contains?: Maybe<String>;
  notes_starts_with?: Maybe<String>;
  notes_not_starts_with?: Maybe<String>;
  notes_ends_with?: Maybe<String>;
  notes_not_ends_with?: Maybe<String>;
  sku?: Maybe<String>;
  sku_not?: Maybe<String>;
  sku_in?: Maybe<String[] | String>;
  sku_not_in?: Maybe<String[] | String>;
  sku_lt?: Maybe<String>;
  sku_lte?: Maybe<String>;
  sku_gt?: Maybe<String>;
  sku_gte?: Maybe<String>;
  sku_contains?: Maybe<String>;
  sku_not_contains?: Maybe<String>;
  sku_starts_with?: Maybe<String>;
  sku_not_starts_with?: Maybe<String>;
  sku_ends_with?: Maybe<String>;
  sku_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  largeImage?: Maybe<String>;
  largeImage_not?: Maybe<String>;
  largeImage_in?: Maybe<String[] | String>;
  largeImage_not_in?: Maybe<String[] | String>;
  largeImage_lt?: Maybe<String>;
  largeImage_lte?: Maybe<String>;
  largeImage_gt?: Maybe<String>;
  largeImage_gte?: Maybe<String>;
  largeImage_contains?: Maybe<String>;
  largeImage_not_contains?: Maybe<String>;
  largeImage_starts_with?: Maybe<String>;
  largeImage_not_starts_with?: Maybe<String>;
  largeImage_ends_with?: Maybe<String>;
  largeImage_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  OR?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  NOT?: Maybe<ProductWhereInput[] | ProductWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  role?: Maybe<String>;
  role_not?: Maybe<String>;
  role_in?: Maybe<String[] | String>;
  role_not_in?: Maybe<String[] | String>;
  role_lt?: Maybe<String>;
  role_lte?: Maybe<String>;
  role_gt?: Maybe<String>;
  role_gte?: Maybe<String>;
  role_contains?: Maybe<String>;
  role_not_contains?: Maybe<String>;
  role_starts_with?: Maybe<String>;
  role_not_starts_with?: Maybe<String>;
  role_ends_with?: Maybe<String>;
  role_not_ends_with?: Maybe<String>;
  verified?: Maybe<Boolean>;
  verified_not?: Maybe<Boolean>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  confirmEmailToken?: Maybe<String>;
  confirmEmailToken_not?: Maybe<String>;
  confirmEmailToken_in?: Maybe<String[] | String>;
  confirmEmailToken_not_in?: Maybe<String[] | String>;
  confirmEmailToken_lt?: Maybe<String>;
  confirmEmailToken_lte?: Maybe<String>;
  confirmEmailToken_gt?: Maybe<String>;
  confirmEmailToken_gte?: Maybe<String>;
  confirmEmailToken_contains?: Maybe<String>;
  confirmEmailToken_not_contains?: Maybe<String>;
  confirmEmailToken_starts_with?: Maybe<String>;
  confirmEmailToken_not_starts_with?: Maybe<String>;
  confirmEmailToken_ends_with?: Maybe<String>;
  confirmEmailToken_not_ends_with?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetToken_not?: Maybe<String>;
  resetToken_in?: Maybe<String[] | String>;
  resetToken_not_in?: Maybe<String[] | String>;
  resetToken_lt?: Maybe<String>;
  resetToken_lte?: Maybe<String>;
  resetToken_gt?: Maybe<String>;
  resetToken_gte?: Maybe<String>;
  resetToken_contains?: Maybe<String>;
  resetToken_not_contains?: Maybe<String>;
  resetToken_starts_with?: Maybe<String>;
  resetToken_not_starts_with?: Maybe<String>;
  resetToken_ends_with?: Maybe<String>;
  resetToken_not_ends_with?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  resetTokenExpiry_not?: Maybe<String>;
  resetTokenExpiry_in?: Maybe<String[] | String>;
  resetTokenExpiry_not_in?: Maybe<String[] | String>;
  resetTokenExpiry_lt?: Maybe<String>;
  resetTokenExpiry_lte?: Maybe<String>;
  resetTokenExpiry_gt?: Maybe<String>;
  resetTokenExpiry_gte?: Maybe<String>;
  resetTokenExpiry_contains?: Maybe<String>;
  resetTokenExpiry_not_contains?: Maybe<String>;
  resetTokenExpiry_starts_with?: Maybe<String>;
  resetTokenExpiry_not_starts_with?: Maybe<String>;
  resetTokenExpiry_ends_with?: Maybe<String>;
  resetTokenExpiry_not_ends_with?: Maybe<String>;
  products_every?: Maybe<ProductWhereInput>;
  products_some?: Maybe<ProductWhereInput>;
  products_none?: Maybe<ProductWhereInput>;
  categories_every?: Maybe<CategoryWhereInput>;
  categories_some?: Maybe<CategoryWhereInput>;
  categories_none?: Maybe<CategoryWhereInput>;
  inventories_every?: Maybe<InventoryWhereInput>;
  inventories_some?: Maybe<InventoryWhereInput>;
  inventories_none?: Maybe<InventoryWhereInput>;
  inventoryItems_every?: Maybe<InventoryItemWhereInput>;
  inventoryItems_some?: Maybe<InventoryItemWhereInput>;
  inventoryItems_none?: Maybe<InventoryItemWhereInput>;
  customers_every?: Maybe<CustomerWhereInput>;
  customers_some?: Maybe<CustomerWhereInput>;
  customers_none?: Maybe<CustomerWhereInput>;
  sales_every?: Maybe<SaleWhereInput>;
  sales_some?: Maybe<SaleWhereInput>;
  sales_none?: Maybe<SaleWhereInput>;
  saleItems_every?: Maybe<SaleItemWhereInput>;
  saleItems_some?: Maybe<SaleItemWhereInput>;
  saleItems_none?: Maybe<SaleItemWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface CategoryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
  OR?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
  NOT?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
}

export interface InventoryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  inventoryItems_every?: Maybe<InventoryItemWhereInput>;
  inventoryItems_some?: Maybe<InventoryItemWhereInput>;
  inventoryItems_none?: Maybe<InventoryItemWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<InventoryWhereInput[] | InventoryWhereInput>;
  OR?: Maybe<InventoryWhereInput[] | InventoryWhereInput>;
  NOT?: Maybe<InventoryWhereInput[] | InventoryWhereInput>;
}

export interface InventoryItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  product?: Maybe<ProductWhereInput>;
  inventory?: Maybe<InventoryWhereInput>;
  amount?: Maybe<Float>;
  amount_not?: Maybe<Float>;
  amount_in?: Maybe<Float[] | Float>;
  amount_not_in?: Maybe<Float[] | Float>;
  amount_lt?: Maybe<Float>;
  amount_lte?: Maybe<Float>;
  amount_gt?: Maybe<Float>;
  amount_gte?: Maybe<Float>;
  transactions_every?: Maybe<InventoryItemTransactionWhereInput>;
  transactions_some?: Maybe<InventoryItemTransactionWhereInput>;
  transactions_none?: Maybe<InventoryItemTransactionWhereInput>;
  AND?: Maybe<InventoryItemWhereInput[] | InventoryItemWhereInput>;
  OR?: Maybe<InventoryItemWhereInput[] | InventoryItemWhereInput>;
  NOT?: Maybe<InventoryItemWhereInput[] | InventoryItemWhereInput>;
}

export interface InventoryItemTransactionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  actor?: Maybe<UserWhereInput>;
  action?: Maybe<InventoryItemTransactionAction>;
  action_not?: Maybe<InventoryItemTransactionAction>;
  action_in?: Maybe<
    InventoryItemTransactionAction[] | InventoryItemTransactionAction
  >;
  action_not_in?: Maybe<
    InventoryItemTransactionAction[] | InventoryItemTransactionAction
  >;
  comment?: Maybe<String>;
  comment_not?: Maybe<String>;
  comment_in?: Maybe<String[] | String>;
  comment_not_in?: Maybe<String[] | String>;
  comment_lt?: Maybe<String>;
  comment_lte?: Maybe<String>;
  comment_gt?: Maybe<String>;
  comment_gte?: Maybe<String>;
  comment_contains?: Maybe<String>;
  comment_not_contains?: Maybe<String>;
  comment_starts_with?: Maybe<String>;
  comment_not_starts_with?: Maybe<String>;
  comment_ends_with?: Maybe<String>;
  comment_not_ends_with?: Maybe<String>;
  dateTime?: Maybe<DateTimeInput>;
  dateTime_not?: Maybe<DateTimeInput>;
  dateTime_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateTime_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateTime_lt?: Maybe<DateTimeInput>;
  dateTime_lte?: Maybe<DateTimeInput>;
  dateTime_gt?: Maybe<DateTimeInput>;
  dateTime_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    InventoryItemTransactionWhereInput[] | InventoryItemTransactionWhereInput
  >;
  OR?: Maybe<
    InventoryItemTransactionWhereInput[] | InventoryItemTransactionWhereInput
  >;
  NOT?: Maybe<
    InventoryItemTransactionWhereInput[] | InventoryItemTransactionWhereInput
  >;
}

export interface CustomerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  street1?: Maybe<String>;
  street1_not?: Maybe<String>;
  street1_in?: Maybe<String[] | String>;
  street1_not_in?: Maybe<String[] | String>;
  street1_lt?: Maybe<String>;
  street1_lte?: Maybe<String>;
  street1_gt?: Maybe<String>;
  street1_gte?: Maybe<String>;
  street1_contains?: Maybe<String>;
  street1_not_contains?: Maybe<String>;
  street1_starts_with?: Maybe<String>;
  street1_not_starts_with?: Maybe<String>;
  street1_ends_with?: Maybe<String>;
  street1_not_ends_with?: Maybe<String>;
  street2?: Maybe<String>;
  street2_not?: Maybe<String>;
  street2_in?: Maybe<String[] | String>;
  street2_not_in?: Maybe<String[] | String>;
  street2_lt?: Maybe<String>;
  street2_lte?: Maybe<String>;
  street2_gt?: Maybe<String>;
  street2_gte?: Maybe<String>;
  street2_contains?: Maybe<String>;
  street2_not_contains?: Maybe<String>;
  street2_starts_with?: Maybe<String>;
  street2_not_starts_with?: Maybe<String>;
  street2_ends_with?: Maybe<String>;
  street2_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  zipCode?: Maybe<String>;
  zipCode_not?: Maybe<String>;
  zipCode_in?: Maybe<String[] | String>;
  zipCode_not_in?: Maybe<String[] | String>;
  zipCode_lt?: Maybe<String>;
  zipCode_lte?: Maybe<String>;
  zipCode_gt?: Maybe<String>;
  zipCode_gte?: Maybe<String>;
  zipCode_contains?: Maybe<String>;
  zipCode_not_contains?: Maybe<String>;
  zipCode_starts_with?: Maybe<String>;
  zipCode_not_starts_with?: Maybe<String>;
  zipCode_ends_with?: Maybe<String>;
  zipCode_not_ends_with?: Maybe<String>;
  country?: Maybe<String>;
  country_not?: Maybe<String>;
  country_in?: Maybe<String[] | String>;
  country_not_in?: Maybe<String[] | String>;
  country_lt?: Maybe<String>;
  country_lte?: Maybe<String>;
  country_gt?: Maybe<String>;
  country_gte?: Maybe<String>;
  country_contains?: Maybe<String>;
  country_not_contains?: Maybe<String>;
  country_starts_with?: Maybe<String>;
  country_not_starts_with?: Maybe<String>;
  country_ends_with?: Maybe<String>;
  country_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CustomerWhereInput[] | CustomerWhereInput>;
  OR?: Maybe<CustomerWhereInput[] | CustomerWhereInput>;
  NOT?: Maybe<CustomerWhereInput[] | CustomerWhereInput>;
}

export interface SaleWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  customer?: Maybe<CustomerWhereInput>;
  timestamp?: Maybe<Int>;
  timestamp_not?: Maybe<Int>;
  timestamp_in?: Maybe<Int[] | Int>;
  timestamp_not_in?: Maybe<Int[] | Int>;
  timestamp_lt?: Maybe<Int>;
  timestamp_lte?: Maybe<Int>;
  timestamp_gt?: Maybe<Int>;
  timestamp_gte?: Maybe<Int>;
  discountType?: Maybe<SpecialSaleDeductionType>;
  discountType_not?: Maybe<SpecialSaleDeductionType>;
  discountType_in?: Maybe<
    SpecialSaleDeductionType[] | SpecialSaleDeductionType
  >;
  discountType_not_in?: Maybe<
    SpecialSaleDeductionType[] | SpecialSaleDeductionType
  >;
  discountValue?: Maybe<String>;
  discountValue_not?: Maybe<String>;
  discountValue_in?: Maybe<String[] | String>;
  discountValue_not_in?: Maybe<String[] | String>;
  discountValue_lt?: Maybe<String>;
  discountValue_lte?: Maybe<String>;
  discountValue_gt?: Maybe<String>;
  discountValue_gte?: Maybe<String>;
  discountValue_contains?: Maybe<String>;
  discountValue_not_contains?: Maybe<String>;
  discountValue_starts_with?: Maybe<String>;
  discountValue_not_starts_with?: Maybe<String>;
  discountValue_ends_with?: Maybe<String>;
  discountValue_not_ends_with?: Maybe<String>;
  taxType?: Maybe<SpecialSaleDeductionType>;
  taxType_not?: Maybe<SpecialSaleDeductionType>;
  taxType_in?: Maybe<SpecialSaleDeductionType[] | SpecialSaleDeductionType>;
  taxType_not_in?: Maybe<SpecialSaleDeductionType[] | SpecialSaleDeductionType>;
  taxValue?: Maybe<String>;
  taxValue_not?: Maybe<String>;
  taxValue_in?: Maybe<String[] | String>;
  taxValue_not_in?: Maybe<String[] | String>;
  taxValue_lt?: Maybe<String>;
  taxValue_lte?: Maybe<String>;
  taxValue_gt?: Maybe<String>;
  taxValue_gte?: Maybe<String>;
  taxValue_contains?: Maybe<String>;
  taxValue_not_contains?: Maybe<String>;
  taxValue_starts_with?: Maybe<String>;
  taxValue_not_starts_with?: Maybe<String>;
  taxValue_ends_with?: Maybe<String>;
  taxValue_not_ends_with?: Maybe<String>;
  shipping?: Maybe<String>;
  shipping_not?: Maybe<String>;
  shipping_in?: Maybe<String[] | String>;
  shipping_not_in?: Maybe<String[] | String>;
  shipping_lt?: Maybe<String>;
  shipping_lte?: Maybe<String>;
  shipping_gt?: Maybe<String>;
  shipping_gte?: Maybe<String>;
  shipping_contains?: Maybe<String>;
  shipping_not_contains?: Maybe<String>;
  shipping_starts_with?: Maybe<String>;
  shipping_not_starts_with?: Maybe<String>;
  shipping_ends_with?: Maybe<String>;
  shipping_not_ends_with?: Maybe<String>;
  note?: Maybe<String>;
  note_not?: Maybe<String>;
  note_in?: Maybe<String[] | String>;
  note_not_in?: Maybe<String[] | String>;
  note_lt?: Maybe<String>;
  note_lte?: Maybe<String>;
  note_gt?: Maybe<String>;
  note_gte?: Maybe<String>;
  note_contains?: Maybe<String>;
  note_not_contains?: Maybe<String>;
  note_starts_with?: Maybe<String>;
  note_not_starts_with?: Maybe<String>;
  note_ends_with?: Maybe<String>;
  note_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SaleWhereInput[] | SaleWhereInput>;
  OR?: Maybe<SaleWhereInput[] | SaleWhereInput>;
  NOT?: Maybe<SaleWhereInput[] | SaleWhereInput>;
}

export interface SaleItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  sale?: Maybe<SaleWhereInput>;
  product?: Maybe<ProductWhereInput>;
  quantity?: Maybe<String>;
  quantity_not?: Maybe<String>;
  quantity_in?: Maybe<String[] | String>;
  quantity_not_in?: Maybe<String[] | String>;
  quantity_lt?: Maybe<String>;
  quantity_lte?: Maybe<String>;
  quantity_gt?: Maybe<String>;
  quantity_gte?: Maybe<String>;
  quantity_contains?: Maybe<String>;
  quantity_not_contains?: Maybe<String>;
  quantity_starts_with?: Maybe<String>;
  quantity_not_starts_with?: Maybe<String>;
  quantity_ends_with?: Maybe<String>;
  quantity_not_ends_with?: Maybe<String>;
  discountType?: Maybe<SpecialSaleDeductionType>;
  discountType_not?: Maybe<SpecialSaleDeductionType>;
  discountType_in?: Maybe<
    SpecialSaleDeductionType[] | SpecialSaleDeductionType
  >;
  discountType_not_in?: Maybe<
    SpecialSaleDeductionType[] | SpecialSaleDeductionType
  >;
  discountValue?: Maybe<String>;
  discountValue_not?: Maybe<String>;
  discountValue_in?: Maybe<String[] | String>;
  discountValue_not_in?: Maybe<String[] | String>;
  discountValue_lt?: Maybe<String>;
  discountValue_lte?: Maybe<String>;
  discountValue_gt?: Maybe<String>;
  discountValue_gte?: Maybe<String>;
  discountValue_contains?: Maybe<String>;
  discountValue_not_contains?: Maybe<String>;
  discountValue_starts_with?: Maybe<String>;
  discountValue_not_starts_with?: Maybe<String>;
  discountValue_ends_with?: Maybe<String>;
  discountValue_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SaleItemWhereInput[] | SaleItemWhereInput>;
  OR?: Maybe<SaleItemWhereInput[] | SaleItemWhereInput>;
  NOT?: Maybe<SaleItemWhereInput[] | SaleItemWhereInput>;
}

export type CustomerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type InventoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type InventoryItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type InventoryItemTransactionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ProductWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SaleWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SaleItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface CategoryCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  user: UserCreateOneWithoutCategoriesInput;
}

export interface UserCreateOneWithoutCategoriesInput {
  create?: Maybe<UserCreateWithoutCategoriesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCategoriesInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  role: String;
  permissions?: Maybe<UserCreatepermissionsInput>;
  verified: Boolean;
  name?: Maybe<String>;
  confirmEmailToken?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  products?: Maybe<ProductCreateManyWithoutUserInput>;
  inventories?: Maybe<InventoryCreateManyWithoutUserInput>;
  inventoryItems?: Maybe<InventoryItemCreateManyInput>;
  customers?: Maybe<CustomerCreateManyWithoutUserInput>;
  sales?: Maybe<SaleCreateManyWithoutUserInput>;
  saleItems?: Maybe<SaleItemCreateManyInput>;
}

export interface UserCreatepermissionsInput {
  set?: Maybe<Permission[] | Permission>;
}

export interface ProductCreateManyWithoutUserInput {
  create?: Maybe<
    ProductCreateWithoutUserInput[] | ProductCreateWithoutUserInput
  >;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
}

export interface ProductCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  name: String;
  salePrice: String;
  costPrice?: Maybe<String>;
  unit?: Maybe<String>;
  currency?: Maybe<String>;
  notes?: Maybe<String>;
  sku?: Maybe<String>;
  image?: Maybe<String>;
  largeImage?: Maybe<String>;
  categories?: Maybe<ProductCreatecategoriesInput>;
}

export interface ProductCreatecategoriesInput {
  set?: Maybe<String[] | String>;
}

export interface InventoryCreateManyWithoutUserInput {
  create?: Maybe<
    InventoryCreateWithoutUserInput[] | InventoryCreateWithoutUserInput
  >;
  connect?: Maybe<InventoryWhereUniqueInput[] | InventoryWhereUniqueInput>;
}

export interface InventoryCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  name: String;
  inventoryItems?: Maybe<InventoryItemCreateManyWithoutInventoryInput>;
}

export interface InventoryItemCreateManyWithoutInventoryInput {
  create?: Maybe<
    | InventoryItemCreateWithoutInventoryInput[]
    | InventoryItemCreateWithoutInventoryInput
  >;
  connect?: Maybe<
    InventoryItemWhereUniqueInput[] | InventoryItemWhereUniqueInput
  >;
}

export interface InventoryItemCreateWithoutInventoryInput {
  id?: Maybe<ID_Input>;
  product: ProductCreateOneInput;
  amount?: Maybe<Float>;
  transactions?: Maybe<InventoryItemTransactionCreateManyInput>;
}

export interface ProductCreateOneInput {
  create?: Maybe<ProductCreateInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  salePrice: String;
  costPrice?: Maybe<String>;
  unit?: Maybe<String>;
  currency?: Maybe<String>;
  notes?: Maybe<String>;
  sku?: Maybe<String>;
  image?: Maybe<String>;
  largeImage?: Maybe<String>;
  categories?: Maybe<ProductCreatecategoriesInput>;
  user: UserCreateOneWithoutProductsInput;
}

export interface UserCreateOneWithoutProductsInput {
  create?: Maybe<UserCreateWithoutProductsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutProductsInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  role: String;
  permissions?: Maybe<UserCreatepermissionsInput>;
  verified: Boolean;
  name?: Maybe<String>;
  confirmEmailToken?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  categories?: Maybe<CategoryCreateManyWithoutUserInput>;
  inventories?: Maybe<InventoryCreateManyWithoutUserInput>;
  inventoryItems?: Maybe<InventoryItemCreateManyInput>;
  customers?: Maybe<CustomerCreateManyWithoutUserInput>;
  sales?: Maybe<SaleCreateManyWithoutUserInput>;
  saleItems?: Maybe<SaleItemCreateManyInput>;
}

export interface CategoryCreateManyWithoutUserInput {
  create?: Maybe<
    CategoryCreateWithoutUserInput[] | CategoryCreateWithoutUserInput
  >;
  connect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
}

export interface CategoryCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface InventoryItemCreateManyInput {
  create?: Maybe<InventoryItemCreateInput[] | InventoryItemCreateInput>;
  connect?: Maybe<
    InventoryItemWhereUniqueInput[] | InventoryItemWhereUniqueInput
  >;
}

export interface InventoryItemCreateInput {
  id?: Maybe<ID_Input>;
  product: ProductCreateOneInput;
  inventory: InventoryCreateOneWithoutInventoryItemsInput;
  amount?: Maybe<Float>;
  transactions?: Maybe<InventoryItemTransactionCreateManyInput>;
}

export interface InventoryCreateOneWithoutInventoryItemsInput {
  create?: Maybe<InventoryCreateWithoutInventoryItemsInput>;
  connect?: Maybe<InventoryWhereUniqueInput>;
}

export interface InventoryCreateWithoutInventoryItemsInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutInventoriesInput;
  name: String;
}

export interface UserCreateOneWithoutInventoriesInput {
  create?: Maybe<UserCreateWithoutInventoriesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutInventoriesInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  role: String;
  permissions?: Maybe<UserCreatepermissionsInput>;
  verified: Boolean;
  name?: Maybe<String>;
  confirmEmailToken?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  products?: Maybe<ProductCreateManyWithoutUserInput>;
  categories?: Maybe<CategoryCreateManyWithoutUserInput>;
  inventoryItems?: Maybe<InventoryItemCreateManyInput>;
  customers?: Maybe<CustomerCreateManyWithoutUserInput>;
  sales?: Maybe<SaleCreateManyWithoutUserInput>;
  saleItems?: Maybe<SaleItemCreateManyInput>;
}

export interface CustomerCreateManyWithoutUserInput {
  create?: Maybe<
    CustomerCreateWithoutUserInput[] | CustomerCreateWithoutUserInput
  >;
  connect?: Maybe<CustomerWhereUniqueInput[] | CustomerWhereUniqueInput>;
}

export interface CustomerCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  name: String;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  street1?: Maybe<String>;
  street2?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  zipCode?: Maybe<String>;
  country?: Maybe<String>;
}

export interface SaleCreateManyWithoutUserInput {
  create?: Maybe<SaleCreateWithoutUserInput[] | SaleCreateWithoutUserInput>;
  connect?: Maybe<SaleWhereUniqueInput[] | SaleWhereUniqueInput>;
}

export interface SaleCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  customer?: Maybe<CustomerCreateOneInput>;
  timestamp: Int;
  discountType?: Maybe<SpecialSaleDeductionType>;
  discountValue?: Maybe<String>;
  taxType?: Maybe<SpecialSaleDeductionType>;
  taxValue?: Maybe<String>;
  shipping?: Maybe<String>;
  note?: Maybe<String>;
}

export interface CustomerCreateOneInput {
  create?: Maybe<CustomerCreateInput>;
  connect?: Maybe<CustomerWhereUniqueInput>;
}

export interface CustomerCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutCustomersInput;
  name: String;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  street1?: Maybe<String>;
  street2?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  zipCode?: Maybe<String>;
  country?: Maybe<String>;
}

export interface UserCreateOneWithoutCustomersInput {
  create?: Maybe<UserCreateWithoutCustomersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCustomersInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  role: String;
  permissions?: Maybe<UserCreatepermissionsInput>;
  verified: Boolean;
  name?: Maybe<String>;
  confirmEmailToken?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  products?: Maybe<ProductCreateManyWithoutUserInput>;
  categories?: Maybe<CategoryCreateManyWithoutUserInput>;
  inventories?: Maybe<InventoryCreateManyWithoutUserInput>;
  inventoryItems?: Maybe<InventoryItemCreateManyInput>;
  sales?: Maybe<SaleCreateManyWithoutUserInput>;
  saleItems?: Maybe<SaleItemCreateManyInput>;
}

export interface SaleItemCreateManyInput {
  create?: Maybe<SaleItemCreateInput[] | SaleItemCreateInput>;
  connect?: Maybe<SaleItemWhereUniqueInput[] | SaleItemWhereUniqueInput>;
}

export interface SaleItemCreateInput {
  id?: Maybe<ID_Input>;
  sale: SaleCreateOneInput;
  product: ProductCreateOneInput;
  quantity: String;
  discountType?: Maybe<SpecialSaleDeductionType>;
  discountValue?: Maybe<String>;
}

export interface SaleCreateOneInput {
  create?: Maybe<SaleCreateInput>;
  connect?: Maybe<SaleWhereUniqueInput>;
}

export interface SaleCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutSalesInput;
  customer?: Maybe<CustomerCreateOneInput>;
  timestamp: Int;
  discountType?: Maybe<SpecialSaleDeductionType>;
  discountValue?: Maybe<String>;
  taxType?: Maybe<SpecialSaleDeductionType>;
  taxValue?: Maybe<String>;
  shipping?: Maybe<String>;
  note?: Maybe<String>;
}

export interface UserCreateOneWithoutSalesInput {
  create?: Maybe<UserCreateWithoutSalesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutSalesInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  role: String;
  permissions?: Maybe<UserCreatepermissionsInput>;
  verified: Boolean;
  name?: Maybe<String>;
  confirmEmailToken?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  products?: Maybe<ProductCreateManyWithoutUserInput>;
  categories?: Maybe<CategoryCreateManyWithoutUserInput>;
  inventories?: Maybe<InventoryCreateManyWithoutUserInput>;
  inventoryItems?: Maybe<InventoryItemCreateManyInput>;
  customers?: Maybe<CustomerCreateManyWithoutUserInput>;
  saleItems?: Maybe<SaleItemCreateManyInput>;
}

export interface InventoryItemTransactionCreateManyInput {
  create?: Maybe<
    InventoryItemTransactionCreateInput[] | InventoryItemTransactionCreateInput
  >;
  connect?: Maybe<
    | InventoryItemTransactionWhereUniqueInput[]
    | InventoryItemTransactionWhereUniqueInput
  >;
}

export interface InventoryItemTransactionCreateInput {
  id?: Maybe<ID_Input>;
  actor: UserCreateOneInput;
  action: InventoryItemTransactionAction;
  comment?: Maybe<String>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  role: String;
  permissions?: Maybe<UserCreatepermissionsInput>;
  verified: Boolean;
  name?: Maybe<String>;
  confirmEmailToken?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  products?: Maybe<ProductCreateManyWithoutUserInput>;
  categories?: Maybe<CategoryCreateManyWithoutUserInput>;
  inventories?: Maybe<InventoryCreateManyWithoutUserInput>;
  inventoryItems?: Maybe<InventoryItemCreateManyInput>;
  customers?: Maybe<CustomerCreateManyWithoutUserInput>;
  sales?: Maybe<SaleCreateManyWithoutUserInput>;
  saleItems?: Maybe<SaleItemCreateManyInput>;
}

export interface CategoryUpdateInput {
  name?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutCategoriesInput>;
}

export interface UserUpdateOneRequiredWithoutCategoriesInput {
  create?: Maybe<UserCreateWithoutCategoriesInput>;
  update?: Maybe<UserUpdateWithoutCategoriesDataInput>;
  upsert?: Maybe<UserUpsertWithoutCategoriesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCategoriesDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<String>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
  verified?: Maybe<Boolean>;
  name?: Maybe<String>;
  confirmEmailToken?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  products?: Maybe<ProductUpdateManyWithoutUserInput>;
  inventories?: Maybe<InventoryUpdateManyWithoutUserInput>;
  inventoryItems?: Maybe<InventoryItemUpdateManyInput>;
  customers?: Maybe<CustomerUpdateManyWithoutUserInput>;
  sales?: Maybe<SaleUpdateManyWithoutUserInput>;
  saleItems?: Maybe<SaleItemUpdateManyInput>;
}

export interface UserUpdatepermissionsInput {
  set?: Maybe<Permission[] | Permission>;
}

export interface ProductUpdateManyWithoutUserInput {
  create?: Maybe<
    ProductCreateWithoutUserInput[] | ProductCreateWithoutUserInput
  >;
  delete?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  set?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  disconnect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  update?: Maybe<
    | ProductUpdateWithWhereUniqueWithoutUserInput[]
    | ProductUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | ProductUpsertWithWhereUniqueWithoutUserInput[]
    | ProductUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  updateMany?: Maybe<
    | ProductUpdateManyWithWhereNestedInput[]
    | ProductUpdateManyWithWhereNestedInput
  >;
}

export interface ProductUpdateWithWhereUniqueWithoutUserInput {
  where: ProductWhereUniqueInput;
  data: ProductUpdateWithoutUserDataInput;
}

export interface ProductUpdateWithoutUserDataInput {
  name?: Maybe<String>;
  salePrice?: Maybe<String>;
  costPrice?: Maybe<String>;
  unit?: Maybe<String>;
  currency?: Maybe<String>;
  notes?: Maybe<String>;
  sku?: Maybe<String>;
  image?: Maybe<String>;
  largeImage?: Maybe<String>;
  categories?: Maybe<ProductUpdatecategoriesInput>;
}

export interface ProductUpdatecategoriesInput {
  set?: Maybe<String[] | String>;
}

export interface ProductUpsertWithWhereUniqueWithoutUserInput {
  where: ProductWhereUniqueInput;
  update: ProductUpdateWithoutUserDataInput;
  create: ProductCreateWithoutUserInput;
}

export interface ProductScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  salePrice?: Maybe<String>;
  salePrice_not?: Maybe<String>;
  salePrice_in?: Maybe<String[] | String>;
  salePrice_not_in?: Maybe<String[] | String>;
  salePrice_lt?: Maybe<String>;
  salePrice_lte?: Maybe<String>;
  salePrice_gt?: Maybe<String>;
  salePrice_gte?: Maybe<String>;
  salePrice_contains?: Maybe<String>;
  salePrice_not_contains?: Maybe<String>;
  salePrice_starts_with?: Maybe<String>;
  salePrice_not_starts_with?: Maybe<String>;
  salePrice_ends_with?: Maybe<String>;
  salePrice_not_ends_with?: Maybe<String>;
  costPrice?: Maybe<String>;
  costPrice_not?: Maybe<String>;
  costPrice_in?: Maybe<String[] | String>;
  costPrice_not_in?: Maybe<String[] | String>;
  costPrice_lt?: Maybe<String>;
  costPrice_lte?: Maybe<String>;
  costPrice_gt?: Maybe<String>;
  costPrice_gte?: Maybe<String>;
  costPrice_contains?: Maybe<String>;
  costPrice_not_contains?: Maybe<String>;
  costPrice_starts_with?: Maybe<String>;
  costPrice_not_starts_with?: Maybe<String>;
  costPrice_ends_with?: Maybe<String>;
  costPrice_not_ends_with?: Maybe<String>;
  unit?: Maybe<String>;
  unit_not?: Maybe<String>;
  unit_in?: Maybe<String[] | String>;
  unit_not_in?: Maybe<String[] | String>;
  unit_lt?: Maybe<String>;
  unit_lte?: Maybe<String>;
  unit_gt?: Maybe<String>;
  unit_gte?: Maybe<String>;
  unit_contains?: Maybe<String>;
  unit_not_contains?: Maybe<String>;
  unit_starts_with?: Maybe<String>;
  unit_not_starts_with?: Maybe<String>;
  unit_ends_with?: Maybe<String>;
  unit_not_ends_with?: Maybe<String>;
  currency?: Maybe<String>;
  currency_not?: Maybe<String>;
  currency_in?: Maybe<String[] | String>;
  currency_not_in?: Maybe<String[] | String>;
  currency_lt?: Maybe<String>;
  currency_lte?: Maybe<String>;
  currency_gt?: Maybe<String>;
  currency_gte?: Maybe<String>;
  currency_contains?: Maybe<String>;
  currency_not_contains?: Maybe<String>;
  currency_starts_with?: Maybe<String>;
  currency_not_starts_with?: Maybe<String>;
  currency_ends_with?: Maybe<String>;
  currency_not_ends_with?: Maybe<String>;
  notes?: Maybe<String>;
  notes_not?: Maybe<String>;
  notes_in?: Maybe<String[] | String>;
  notes_not_in?: Maybe<String[] | String>;
  notes_lt?: Maybe<String>;
  notes_lte?: Maybe<String>;
  notes_gt?: Maybe<String>;
  notes_gte?: Maybe<String>;
  notes_contains?: Maybe<String>;
  notes_not_contains?: Maybe<String>;
  notes_starts_with?: Maybe<String>;
  notes_not_starts_with?: Maybe<String>;
  notes_ends_with?: Maybe<String>;
  notes_not_ends_with?: Maybe<String>;
  sku?: Maybe<String>;
  sku_not?: Maybe<String>;
  sku_in?: Maybe<String[] | String>;
  sku_not_in?: Maybe<String[] | String>;
  sku_lt?: Maybe<String>;
  sku_lte?: Maybe<String>;
  sku_gt?: Maybe<String>;
  sku_gte?: Maybe<String>;
  sku_contains?: Maybe<String>;
  sku_not_contains?: Maybe<String>;
  sku_starts_with?: Maybe<String>;
  sku_not_starts_with?: Maybe<String>;
  sku_ends_with?: Maybe<String>;
  sku_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  largeImage?: Maybe<String>;
  largeImage_not?: Maybe<String>;
  largeImage_in?: Maybe<String[] | String>;
  largeImage_not_in?: Maybe<String[] | String>;
  largeImage_lt?: Maybe<String>;
  largeImage_lte?: Maybe<String>;
  largeImage_gt?: Maybe<String>;
  largeImage_gte?: Maybe<String>;
  largeImage_contains?: Maybe<String>;
  largeImage_not_contains?: Maybe<String>;
  largeImage_starts_with?: Maybe<String>;
  largeImage_not_starts_with?: Maybe<String>;
  largeImage_ends_with?: Maybe<String>;
  largeImage_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  OR?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  NOT?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
}

export interface ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput;
  data: ProductUpdateManyDataInput;
}

export interface ProductUpdateManyDataInput {
  name?: Maybe<String>;
  salePrice?: Maybe<String>;
  costPrice?: Maybe<String>;
  unit?: Maybe<String>;
  currency?: Maybe<String>;
  notes?: Maybe<String>;
  sku?: Maybe<String>;
  image?: Maybe<String>;
  largeImage?: Maybe<String>;
  categories?: Maybe<ProductUpdatecategoriesInput>;
}

export interface InventoryUpdateManyWithoutUserInput {
  create?: Maybe<
    InventoryCreateWithoutUserInput[] | InventoryCreateWithoutUserInput
  >;
  delete?: Maybe<InventoryWhereUniqueInput[] | InventoryWhereUniqueInput>;
  connect?: Maybe<InventoryWhereUniqueInput[] | InventoryWhereUniqueInput>;
  set?: Maybe<InventoryWhereUniqueInput[] | InventoryWhereUniqueInput>;
  disconnect?: Maybe<InventoryWhereUniqueInput[] | InventoryWhereUniqueInput>;
  update?: Maybe<
    | InventoryUpdateWithWhereUniqueWithoutUserInput[]
    | InventoryUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | InventoryUpsertWithWhereUniqueWithoutUserInput[]
    | InventoryUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<InventoryScalarWhereInput[] | InventoryScalarWhereInput>;
  updateMany?: Maybe<
    | InventoryUpdateManyWithWhereNestedInput[]
    | InventoryUpdateManyWithWhereNestedInput
  >;
}

export interface InventoryUpdateWithWhereUniqueWithoutUserInput {
  where: InventoryWhereUniqueInput;
  data: InventoryUpdateWithoutUserDataInput;
}

export interface InventoryUpdateWithoutUserDataInput {
  name?: Maybe<String>;
  inventoryItems?: Maybe<InventoryItemUpdateManyWithoutInventoryInput>;
}

export interface InventoryItemUpdateManyWithoutInventoryInput {
  create?: Maybe<
    | InventoryItemCreateWithoutInventoryInput[]
    | InventoryItemCreateWithoutInventoryInput
  >;
  delete?: Maybe<
    InventoryItemWhereUniqueInput[] | InventoryItemWhereUniqueInput
  >;
  connect?: Maybe<
    InventoryItemWhereUniqueInput[] | InventoryItemWhereUniqueInput
  >;
  set?: Maybe<InventoryItemWhereUniqueInput[] | InventoryItemWhereUniqueInput>;
  disconnect?: Maybe<
    InventoryItemWhereUniqueInput[] | InventoryItemWhereUniqueInput
  >;
  update?: Maybe<
    | InventoryItemUpdateWithWhereUniqueWithoutInventoryInput[]
    | InventoryItemUpdateWithWhereUniqueWithoutInventoryInput
  >;
  upsert?: Maybe<
    | InventoryItemUpsertWithWhereUniqueWithoutInventoryInput[]
    | InventoryItemUpsertWithWhereUniqueWithoutInventoryInput
  >;
  deleteMany?: Maybe<
    InventoryItemScalarWhereInput[] | InventoryItemScalarWhereInput
  >;
  updateMany?: Maybe<
    | InventoryItemUpdateManyWithWhereNestedInput[]
    | InventoryItemUpdateManyWithWhereNestedInput
  >;
}

export interface InventoryItemUpdateWithWhereUniqueWithoutInventoryInput {
  where: InventoryItemWhereUniqueInput;
  data: InventoryItemUpdateWithoutInventoryDataInput;
}

export interface InventoryItemUpdateWithoutInventoryDataInput {
  product?: Maybe<ProductUpdateOneRequiredInput>;
  amount?: Maybe<Float>;
  transactions?: Maybe<InventoryItemTransactionUpdateManyInput>;
}

export interface ProductUpdateOneRequiredInput {
  create?: Maybe<ProductCreateInput>;
  update?: Maybe<ProductUpdateDataInput>;
  upsert?: Maybe<ProductUpsertNestedInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductUpdateDataInput {
  name?: Maybe<String>;
  salePrice?: Maybe<String>;
  costPrice?: Maybe<String>;
  unit?: Maybe<String>;
  currency?: Maybe<String>;
  notes?: Maybe<String>;
  sku?: Maybe<String>;
  image?: Maybe<String>;
  largeImage?: Maybe<String>;
  categories?: Maybe<ProductUpdatecategoriesInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutProductsInput>;
}

export interface UserUpdateOneRequiredWithoutProductsInput {
  create?: Maybe<UserCreateWithoutProductsInput>;
  update?: Maybe<UserUpdateWithoutProductsDataInput>;
  upsert?: Maybe<UserUpsertWithoutProductsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutProductsDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<String>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
  verified?: Maybe<Boolean>;
  name?: Maybe<String>;
  confirmEmailToken?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  categories?: Maybe<CategoryUpdateManyWithoutUserInput>;
  inventories?: Maybe<InventoryUpdateManyWithoutUserInput>;
  inventoryItems?: Maybe<InventoryItemUpdateManyInput>;
  customers?: Maybe<CustomerUpdateManyWithoutUserInput>;
  sales?: Maybe<SaleUpdateManyWithoutUserInput>;
  saleItems?: Maybe<SaleItemUpdateManyInput>;
}

export interface CategoryUpdateManyWithoutUserInput {
  create?: Maybe<
    CategoryCreateWithoutUserInput[] | CategoryCreateWithoutUserInput
  >;
  delete?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  connect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  set?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  disconnect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  update?: Maybe<
    | CategoryUpdateWithWhereUniqueWithoutUserInput[]
    | CategoryUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | CategoryUpsertWithWhereUniqueWithoutUserInput[]
    | CategoryUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  updateMany?: Maybe<
    | CategoryUpdateManyWithWhereNestedInput[]
    | CategoryUpdateManyWithWhereNestedInput
  >;
}

export interface CategoryUpdateWithWhereUniqueWithoutUserInput {
  where: CategoryWhereUniqueInput;
  data: CategoryUpdateWithoutUserDataInput;
}

export interface CategoryUpdateWithoutUserDataInput {
  name?: Maybe<String>;
}

export interface CategoryUpsertWithWhereUniqueWithoutUserInput {
  where: CategoryWhereUniqueInput;
  update: CategoryUpdateWithoutUserDataInput;
  create: CategoryCreateWithoutUserInput;
}

export interface CategoryScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  OR?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  NOT?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
}

export interface CategoryUpdateManyWithWhereNestedInput {
  where: CategoryScalarWhereInput;
  data: CategoryUpdateManyDataInput;
}

export interface CategoryUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface InventoryItemUpdateManyInput {
  create?: Maybe<InventoryItemCreateInput[] | InventoryItemCreateInput>;
  update?: Maybe<
    | InventoryItemUpdateWithWhereUniqueNestedInput[]
    | InventoryItemUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | InventoryItemUpsertWithWhereUniqueNestedInput[]
    | InventoryItemUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<
    InventoryItemWhereUniqueInput[] | InventoryItemWhereUniqueInput
  >;
  connect?: Maybe<
    InventoryItemWhereUniqueInput[] | InventoryItemWhereUniqueInput
  >;
  set?: Maybe<InventoryItemWhereUniqueInput[] | InventoryItemWhereUniqueInput>;
  disconnect?: Maybe<
    InventoryItemWhereUniqueInput[] | InventoryItemWhereUniqueInput
  >;
  deleteMany?: Maybe<
    InventoryItemScalarWhereInput[] | InventoryItemScalarWhereInput
  >;
  updateMany?: Maybe<
    | InventoryItemUpdateManyWithWhereNestedInput[]
    | InventoryItemUpdateManyWithWhereNestedInput
  >;
}

export interface InventoryItemUpdateWithWhereUniqueNestedInput {
  where: InventoryItemWhereUniqueInput;
  data: InventoryItemUpdateDataInput;
}

export interface InventoryItemUpdateDataInput {
  product?: Maybe<ProductUpdateOneRequiredInput>;
  inventory?: Maybe<InventoryUpdateOneRequiredWithoutInventoryItemsInput>;
  amount?: Maybe<Float>;
  transactions?: Maybe<InventoryItemTransactionUpdateManyInput>;
}

export interface InventoryUpdateOneRequiredWithoutInventoryItemsInput {
  create?: Maybe<InventoryCreateWithoutInventoryItemsInput>;
  update?: Maybe<InventoryUpdateWithoutInventoryItemsDataInput>;
  upsert?: Maybe<InventoryUpsertWithoutInventoryItemsInput>;
  connect?: Maybe<InventoryWhereUniqueInput>;
}

export interface InventoryUpdateWithoutInventoryItemsDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutInventoriesInput>;
  name?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutInventoriesInput {
  create?: Maybe<UserCreateWithoutInventoriesInput>;
  update?: Maybe<UserUpdateWithoutInventoriesDataInput>;
  upsert?: Maybe<UserUpsertWithoutInventoriesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutInventoriesDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<String>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
  verified?: Maybe<Boolean>;
  name?: Maybe<String>;
  confirmEmailToken?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  products?: Maybe<ProductUpdateManyWithoutUserInput>;
  categories?: Maybe<CategoryUpdateManyWithoutUserInput>;
  inventoryItems?: Maybe<InventoryItemUpdateManyInput>;
  customers?: Maybe<CustomerUpdateManyWithoutUserInput>;
  sales?: Maybe<SaleUpdateManyWithoutUserInput>;
  saleItems?: Maybe<SaleItemUpdateManyInput>;
}

export interface CustomerUpdateManyWithoutUserInput {
  create?: Maybe<
    CustomerCreateWithoutUserInput[] | CustomerCreateWithoutUserInput
  >;
  delete?: Maybe<CustomerWhereUniqueInput[] | CustomerWhereUniqueInput>;
  connect?: Maybe<CustomerWhereUniqueInput[] | CustomerWhereUniqueInput>;
  set?: Maybe<CustomerWhereUniqueInput[] | CustomerWhereUniqueInput>;
  disconnect?: Maybe<CustomerWhereUniqueInput[] | CustomerWhereUniqueInput>;
  update?: Maybe<
    | CustomerUpdateWithWhereUniqueWithoutUserInput[]
    | CustomerUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | CustomerUpsertWithWhereUniqueWithoutUserInput[]
    | CustomerUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<CustomerScalarWhereInput[] | CustomerScalarWhereInput>;
  updateMany?: Maybe<
    | CustomerUpdateManyWithWhereNestedInput[]
    | CustomerUpdateManyWithWhereNestedInput
  >;
}

export interface CustomerUpdateWithWhereUniqueWithoutUserInput {
  where: CustomerWhereUniqueInput;
  data: CustomerUpdateWithoutUserDataInput;
}

export interface CustomerUpdateWithoutUserDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  street1?: Maybe<String>;
  street2?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  zipCode?: Maybe<String>;
  country?: Maybe<String>;
}

export interface CustomerUpsertWithWhereUniqueWithoutUserInput {
  where: CustomerWhereUniqueInput;
  update: CustomerUpdateWithoutUserDataInput;
  create: CustomerCreateWithoutUserInput;
}

export interface CustomerScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  street1?: Maybe<String>;
  street1_not?: Maybe<String>;
  street1_in?: Maybe<String[] | String>;
  street1_not_in?: Maybe<String[] | String>;
  street1_lt?: Maybe<String>;
  street1_lte?: Maybe<String>;
  street1_gt?: Maybe<String>;
  street1_gte?: Maybe<String>;
  street1_contains?: Maybe<String>;
  street1_not_contains?: Maybe<String>;
  street1_starts_with?: Maybe<String>;
  street1_not_starts_with?: Maybe<String>;
  street1_ends_with?: Maybe<String>;
  street1_not_ends_with?: Maybe<String>;
  street2?: Maybe<String>;
  street2_not?: Maybe<String>;
  street2_in?: Maybe<String[] | String>;
  street2_not_in?: Maybe<String[] | String>;
  street2_lt?: Maybe<String>;
  street2_lte?: Maybe<String>;
  street2_gt?: Maybe<String>;
  street2_gte?: Maybe<String>;
  street2_contains?: Maybe<String>;
  street2_not_contains?: Maybe<String>;
  street2_starts_with?: Maybe<String>;
  street2_not_starts_with?: Maybe<String>;
  street2_ends_with?: Maybe<String>;
  street2_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  zipCode?: Maybe<String>;
  zipCode_not?: Maybe<String>;
  zipCode_in?: Maybe<String[] | String>;
  zipCode_not_in?: Maybe<String[] | String>;
  zipCode_lt?: Maybe<String>;
  zipCode_lte?: Maybe<String>;
  zipCode_gt?: Maybe<String>;
  zipCode_gte?: Maybe<String>;
  zipCode_contains?: Maybe<String>;
  zipCode_not_contains?: Maybe<String>;
  zipCode_starts_with?: Maybe<String>;
  zipCode_not_starts_with?: Maybe<String>;
  zipCode_ends_with?: Maybe<String>;
  zipCode_not_ends_with?: Maybe<String>;
  country?: Maybe<String>;
  country_not?: Maybe<String>;
  country_in?: Maybe<String[] | String>;
  country_not_in?: Maybe<String[] | String>;
  country_lt?: Maybe<String>;
  country_lte?: Maybe<String>;
  country_gt?: Maybe<String>;
  country_gte?: Maybe<String>;
  country_contains?: Maybe<String>;
  country_not_contains?: Maybe<String>;
  country_starts_with?: Maybe<String>;
  country_not_starts_with?: Maybe<String>;
  country_ends_with?: Maybe<String>;
  country_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CustomerScalarWhereInput[] | CustomerScalarWhereInput>;
  OR?: Maybe<CustomerScalarWhereInput[] | CustomerScalarWhereInput>;
  NOT?: Maybe<CustomerScalarWhereInput[] | CustomerScalarWhereInput>;
}

export interface CustomerUpdateManyWithWhereNestedInput {
  where: CustomerScalarWhereInput;
  data: CustomerUpdateManyDataInput;
}

export interface CustomerUpdateManyDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  street1?: Maybe<String>;
  street2?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  zipCode?: Maybe<String>;
  country?: Maybe<String>;
}

export interface SaleUpdateManyWithoutUserInput {
  create?: Maybe<SaleCreateWithoutUserInput[] | SaleCreateWithoutUserInput>;
  delete?: Maybe<SaleWhereUniqueInput[] | SaleWhereUniqueInput>;
  connect?: Maybe<SaleWhereUniqueInput[] | SaleWhereUniqueInput>;
  set?: Maybe<SaleWhereUniqueInput[] | SaleWhereUniqueInput>;
  disconnect?: Maybe<SaleWhereUniqueInput[] | SaleWhereUniqueInput>;
  update?: Maybe<
    | SaleUpdateWithWhereUniqueWithoutUserInput[]
    | SaleUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | SaleUpsertWithWhereUniqueWithoutUserInput[]
    | SaleUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<SaleScalarWhereInput[] | SaleScalarWhereInput>;
  updateMany?: Maybe<
    SaleUpdateManyWithWhereNestedInput[] | SaleUpdateManyWithWhereNestedInput
  >;
}

export interface SaleUpdateWithWhereUniqueWithoutUserInput {
  where: SaleWhereUniqueInput;
  data: SaleUpdateWithoutUserDataInput;
}

export interface SaleUpdateWithoutUserDataInput {
  customer?: Maybe<CustomerUpdateOneInput>;
  timestamp?: Maybe<Int>;
  discountType?: Maybe<SpecialSaleDeductionType>;
  discountValue?: Maybe<String>;
  taxType?: Maybe<SpecialSaleDeductionType>;
  taxValue?: Maybe<String>;
  shipping?: Maybe<String>;
  note?: Maybe<String>;
}

export interface CustomerUpdateOneInput {
  create?: Maybe<CustomerCreateInput>;
  update?: Maybe<CustomerUpdateDataInput>;
  upsert?: Maybe<CustomerUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CustomerWhereUniqueInput>;
}

export interface CustomerUpdateDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutCustomersInput>;
  name?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  street1?: Maybe<String>;
  street2?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  zipCode?: Maybe<String>;
  country?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutCustomersInput {
  create?: Maybe<UserCreateWithoutCustomersInput>;
  update?: Maybe<UserUpdateWithoutCustomersDataInput>;
  upsert?: Maybe<UserUpsertWithoutCustomersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCustomersDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<String>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
  verified?: Maybe<Boolean>;
  name?: Maybe<String>;
  confirmEmailToken?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  products?: Maybe<ProductUpdateManyWithoutUserInput>;
  categories?: Maybe<CategoryUpdateManyWithoutUserInput>;
  inventories?: Maybe<InventoryUpdateManyWithoutUserInput>;
  inventoryItems?: Maybe<InventoryItemUpdateManyInput>;
  sales?: Maybe<SaleUpdateManyWithoutUserInput>;
  saleItems?: Maybe<SaleItemUpdateManyInput>;
}

export interface SaleItemUpdateManyInput {
  create?: Maybe<SaleItemCreateInput[] | SaleItemCreateInput>;
  update?: Maybe<
    | SaleItemUpdateWithWhereUniqueNestedInput[]
    | SaleItemUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | SaleItemUpsertWithWhereUniqueNestedInput[]
    | SaleItemUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<SaleItemWhereUniqueInput[] | SaleItemWhereUniqueInput>;
  connect?: Maybe<SaleItemWhereUniqueInput[] | SaleItemWhereUniqueInput>;
  set?: Maybe<SaleItemWhereUniqueInput[] | SaleItemWhereUniqueInput>;
  disconnect?: Maybe<SaleItemWhereUniqueInput[] | SaleItemWhereUniqueInput>;
  deleteMany?: Maybe<SaleItemScalarWhereInput[] | SaleItemScalarWhereInput>;
  updateMany?: Maybe<
    | SaleItemUpdateManyWithWhereNestedInput[]
    | SaleItemUpdateManyWithWhereNestedInput
  >;
}

export interface SaleItemUpdateWithWhereUniqueNestedInput {
  where: SaleItemWhereUniqueInput;
  data: SaleItemUpdateDataInput;
}

export interface SaleItemUpdateDataInput {
  sale?: Maybe<SaleUpdateOneRequiredInput>;
  product?: Maybe<ProductUpdateOneRequiredInput>;
  quantity?: Maybe<String>;
  discountType?: Maybe<SpecialSaleDeductionType>;
  discountValue?: Maybe<String>;
}

export interface SaleUpdateOneRequiredInput {
  create?: Maybe<SaleCreateInput>;
  update?: Maybe<SaleUpdateDataInput>;
  upsert?: Maybe<SaleUpsertNestedInput>;
  connect?: Maybe<SaleWhereUniqueInput>;
}

export interface SaleUpdateDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutSalesInput>;
  customer?: Maybe<CustomerUpdateOneInput>;
  timestamp?: Maybe<Int>;
  discountType?: Maybe<SpecialSaleDeductionType>;
  discountValue?: Maybe<String>;
  taxType?: Maybe<SpecialSaleDeductionType>;
  taxValue?: Maybe<String>;
  shipping?: Maybe<String>;
  note?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutSalesInput {
  create?: Maybe<UserCreateWithoutSalesInput>;
  update?: Maybe<UserUpdateWithoutSalesDataInput>;
  upsert?: Maybe<UserUpsertWithoutSalesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutSalesDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<String>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
  verified?: Maybe<Boolean>;
  name?: Maybe<String>;
  confirmEmailToken?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  products?: Maybe<ProductUpdateManyWithoutUserInput>;
  categories?: Maybe<CategoryUpdateManyWithoutUserInput>;
  inventories?: Maybe<InventoryUpdateManyWithoutUserInput>;
  inventoryItems?: Maybe<InventoryItemUpdateManyInput>;
  customers?: Maybe<CustomerUpdateManyWithoutUserInput>;
  saleItems?: Maybe<SaleItemUpdateManyInput>;
}

export interface UserUpsertWithoutSalesInput {
  update: UserUpdateWithoutSalesDataInput;
  create: UserCreateWithoutSalesInput;
}

export interface SaleUpsertNestedInput {
  update: SaleUpdateDataInput;
  create: SaleCreateInput;
}

export interface SaleItemUpsertWithWhereUniqueNestedInput {
  where: SaleItemWhereUniqueInput;
  update: SaleItemUpdateDataInput;
  create: SaleItemCreateInput;
}

export interface SaleItemScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  quantity?: Maybe<String>;
  quantity_not?: Maybe<String>;
  quantity_in?: Maybe<String[] | String>;
  quantity_not_in?: Maybe<String[] | String>;
  quantity_lt?: Maybe<String>;
  quantity_lte?: Maybe<String>;
  quantity_gt?: Maybe<String>;
  quantity_gte?: Maybe<String>;
  quantity_contains?: Maybe<String>;
  quantity_not_contains?: Maybe<String>;
  quantity_starts_with?: Maybe<String>;
  quantity_not_starts_with?: Maybe<String>;
  quantity_ends_with?: Maybe<String>;
  quantity_not_ends_with?: Maybe<String>;
  discountType?: Maybe<SpecialSaleDeductionType>;
  discountType_not?: Maybe<SpecialSaleDeductionType>;
  discountType_in?: Maybe<
    SpecialSaleDeductionType[] | SpecialSaleDeductionType
  >;
  discountType_not_in?: Maybe<
    SpecialSaleDeductionType[] | SpecialSaleDeductionType
  >;
  discountValue?: Maybe<String>;
  discountValue_not?: Maybe<String>;
  discountValue_in?: Maybe<String[] | String>;
  discountValue_not_in?: Maybe<String[] | String>;
  discountValue_lt?: Maybe<String>;
  discountValue_lte?: Maybe<String>;
  discountValue_gt?: Maybe<String>;
  discountValue_gte?: Maybe<String>;
  discountValue_contains?: Maybe<String>;
  discountValue_not_contains?: Maybe<String>;
  discountValue_starts_with?: Maybe<String>;
  discountValue_not_starts_with?: Maybe<String>;
  discountValue_ends_with?: Maybe<String>;
  discountValue_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SaleItemScalarWhereInput[] | SaleItemScalarWhereInput>;
  OR?: Maybe<SaleItemScalarWhereInput[] | SaleItemScalarWhereInput>;
  NOT?: Maybe<SaleItemScalarWhereInput[] | SaleItemScalarWhereInput>;
}

export interface SaleItemUpdateManyWithWhereNestedInput {
  where: SaleItemScalarWhereInput;
  data: SaleItemUpdateManyDataInput;
}

export interface SaleItemUpdateManyDataInput {
  quantity?: Maybe<String>;
  discountType?: Maybe<SpecialSaleDeductionType>;
  discountValue?: Maybe<String>;
}

export interface UserUpsertWithoutCustomersInput {
  update: UserUpdateWithoutCustomersDataInput;
  create: UserCreateWithoutCustomersInput;
}

export interface CustomerUpsertNestedInput {
  update: CustomerUpdateDataInput;
  create: CustomerCreateInput;
}

export interface SaleUpsertWithWhereUniqueWithoutUserInput {
  where: SaleWhereUniqueInput;
  update: SaleUpdateWithoutUserDataInput;
  create: SaleCreateWithoutUserInput;
}

export interface SaleScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  timestamp?: Maybe<Int>;
  timestamp_not?: Maybe<Int>;
  timestamp_in?: Maybe<Int[] | Int>;
  timestamp_not_in?: Maybe<Int[] | Int>;
  timestamp_lt?: Maybe<Int>;
  timestamp_lte?: Maybe<Int>;
  timestamp_gt?: Maybe<Int>;
  timestamp_gte?: Maybe<Int>;
  discountType?: Maybe<SpecialSaleDeductionType>;
  discountType_not?: Maybe<SpecialSaleDeductionType>;
  discountType_in?: Maybe<
    SpecialSaleDeductionType[] | SpecialSaleDeductionType
  >;
  discountType_not_in?: Maybe<
    SpecialSaleDeductionType[] | SpecialSaleDeductionType
  >;
  discountValue?: Maybe<String>;
  discountValue_not?: Maybe<String>;
  discountValue_in?: Maybe<String[] | String>;
  discountValue_not_in?: Maybe<String[] | String>;
  discountValue_lt?: Maybe<String>;
  discountValue_lte?: Maybe<String>;
  discountValue_gt?: Maybe<String>;
  discountValue_gte?: Maybe<String>;
  discountValue_contains?: Maybe<String>;
  discountValue_not_contains?: Maybe<String>;
  discountValue_starts_with?: Maybe<String>;
  discountValue_not_starts_with?: Maybe<String>;
  discountValue_ends_with?: Maybe<String>;
  discountValue_not_ends_with?: Maybe<String>;
  taxType?: Maybe<SpecialSaleDeductionType>;
  taxType_not?: Maybe<SpecialSaleDeductionType>;
  taxType_in?: Maybe<SpecialSaleDeductionType[] | SpecialSaleDeductionType>;
  taxType_not_in?: Maybe<SpecialSaleDeductionType[] | SpecialSaleDeductionType>;
  taxValue?: Maybe<String>;
  taxValue_not?: Maybe<String>;
  taxValue_in?: Maybe<String[] | String>;
  taxValue_not_in?: Maybe<String[] | String>;
  taxValue_lt?: Maybe<String>;
  taxValue_lte?: Maybe<String>;
  taxValue_gt?: Maybe<String>;
  taxValue_gte?: Maybe<String>;
  taxValue_contains?: Maybe<String>;
  taxValue_not_contains?: Maybe<String>;
  taxValue_starts_with?: Maybe<String>;
  taxValue_not_starts_with?: Maybe<String>;
  taxValue_ends_with?: Maybe<String>;
  taxValue_not_ends_with?: Maybe<String>;
  shipping?: Maybe<String>;
  shipping_not?: Maybe<String>;
  shipping_in?: Maybe<String[] | String>;
  shipping_not_in?: Maybe<String[] | String>;
  shipping_lt?: Maybe<String>;
  shipping_lte?: Maybe<String>;
  shipping_gt?: Maybe<String>;
  shipping_gte?: Maybe<String>;
  shipping_contains?: Maybe<String>;
  shipping_not_contains?: Maybe<String>;
  shipping_starts_with?: Maybe<String>;
  shipping_not_starts_with?: Maybe<String>;
  shipping_ends_with?: Maybe<String>;
  shipping_not_ends_with?: Maybe<String>;
  note?: Maybe<String>;
  note_not?: Maybe<String>;
  note_in?: Maybe<String[] | String>;
  note_not_in?: Maybe<String[] | String>;
  note_lt?: Maybe<String>;
  note_lte?: Maybe<String>;
  note_gt?: Maybe<String>;
  note_gte?: Maybe<String>;
  note_contains?: Maybe<String>;
  note_not_contains?: Maybe<String>;
  note_starts_with?: Maybe<String>;
  note_not_starts_with?: Maybe<String>;
  note_ends_with?: Maybe<String>;
  note_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SaleScalarWhereInput[] | SaleScalarWhereInput>;
  OR?: Maybe<SaleScalarWhereInput[] | SaleScalarWhereInput>;
  NOT?: Maybe<SaleScalarWhereInput[] | SaleScalarWhereInput>;
}

export interface SaleUpdateManyWithWhereNestedInput {
  where: SaleScalarWhereInput;
  data: SaleUpdateManyDataInput;
}

export interface SaleUpdateManyDataInput {
  timestamp?: Maybe<Int>;
  discountType?: Maybe<SpecialSaleDeductionType>;
  discountValue?: Maybe<String>;
  taxType?: Maybe<SpecialSaleDeductionType>;
  taxValue?: Maybe<String>;
  shipping?: Maybe<String>;
  note?: Maybe<String>;
}

export interface UserUpsertWithoutInventoriesInput {
  update: UserUpdateWithoutInventoriesDataInput;
  create: UserCreateWithoutInventoriesInput;
}

export interface InventoryUpsertWithoutInventoryItemsInput {
  update: InventoryUpdateWithoutInventoryItemsDataInput;
  create: InventoryCreateWithoutInventoryItemsInput;
}

export interface InventoryItemTransactionUpdateManyInput {
  create?: Maybe<
    InventoryItemTransactionCreateInput[] | InventoryItemTransactionCreateInput
  >;
  update?: Maybe<
    | InventoryItemTransactionUpdateWithWhereUniqueNestedInput[]
    | InventoryItemTransactionUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | InventoryItemTransactionUpsertWithWhereUniqueNestedInput[]
    | InventoryItemTransactionUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<
    | InventoryItemTransactionWhereUniqueInput[]
    | InventoryItemTransactionWhereUniqueInput
  >;
  connect?: Maybe<
    | InventoryItemTransactionWhereUniqueInput[]
    | InventoryItemTransactionWhereUniqueInput
  >;
  set?: Maybe<
    | InventoryItemTransactionWhereUniqueInput[]
    | InventoryItemTransactionWhereUniqueInput
  >;
  disconnect?: Maybe<
    | InventoryItemTransactionWhereUniqueInput[]
    | InventoryItemTransactionWhereUniqueInput
  >;
  deleteMany?: Maybe<
    | InventoryItemTransactionScalarWhereInput[]
    | InventoryItemTransactionScalarWhereInput
  >;
  updateMany?: Maybe<
    | InventoryItemTransactionUpdateManyWithWhereNestedInput[]
    | InventoryItemTransactionUpdateManyWithWhereNestedInput
  >;
}

export interface InventoryItemTransactionUpdateWithWhereUniqueNestedInput {
  where: InventoryItemTransactionWhereUniqueInput;
  data: InventoryItemTransactionUpdateDataInput;
}

export interface InventoryItemTransactionUpdateDataInput {
  actor?: Maybe<UserUpdateOneRequiredInput>;
  action?: Maybe<InventoryItemTransactionAction>;
  comment?: Maybe<String>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<String>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
  verified?: Maybe<Boolean>;
  name?: Maybe<String>;
  confirmEmailToken?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  products?: Maybe<ProductUpdateManyWithoutUserInput>;
  categories?: Maybe<CategoryUpdateManyWithoutUserInput>;
  inventories?: Maybe<InventoryUpdateManyWithoutUserInput>;
  inventoryItems?: Maybe<InventoryItemUpdateManyInput>;
  customers?: Maybe<CustomerUpdateManyWithoutUserInput>;
  sales?: Maybe<SaleUpdateManyWithoutUserInput>;
  saleItems?: Maybe<SaleItemUpdateManyInput>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface InventoryItemTransactionUpsertWithWhereUniqueNestedInput {
  where: InventoryItemTransactionWhereUniqueInput;
  update: InventoryItemTransactionUpdateDataInput;
  create: InventoryItemTransactionCreateInput;
}

export interface InventoryItemTransactionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  action?: Maybe<InventoryItemTransactionAction>;
  action_not?: Maybe<InventoryItemTransactionAction>;
  action_in?: Maybe<
    InventoryItemTransactionAction[] | InventoryItemTransactionAction
  >;
  action_not_in?: Maybe<
    InventoryItemTransactionAction[] | InventoryItemTransactionAction
  >;
  comment?: Maybe<String>;
  comment_not?: Maybe<String>;
  comment_in?: Maybe<String[] | String>;
  comment_not_in?: Maybe<String[] | String>;
  comment_lt?: Maybe<String>;
  comment_lte?: Maybe<String>;
  comment_gt?: Maybe<String>;
  comment_gte?: Maybe<String>;
  comment_contains?: Maybe<String>;
  comment_not_contains?: Maybe<String>;
  comment_starts_with?: Maybe<String>;
  comment_not_starts_with?: Maybe<String>;
  comment_ends_with?: Maybe<String>;
  comment_not_ends_with?: Maybe<String>;
  dateTime?: Maybe<DateTimeInput>;
  dateTime_not?: Maybe<DateTimeInput>;
  dateTime_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateTime_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateTime_lt?: Maybe<DateTimeInput>;
  dateTime_lte?: Maybe<DateTimeInput>;
  dateTime_gt?: Maybe<DateTimeInput>;
  dateTime_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    | InventoryItemTransactionScalarWhereInput[]
    | InventoryItemTransactionScalarWhereInput
  >;
  OR?: Maybe<
    | InventoryItemTransactionScalarWhereInput[]
    | InventoryItemTransactionScalarWhereInput
  >;
  NOT?: Maybe<
    | InventoryItemTransactionScalarWhereInput[]
    | InventoryItemTransactionScalarWhereInput
  >;
}

export interface InventoryItemTransactionUpdateManyWithWhereNestedInput {
  where: InventoryItemTransactionScalarWhereInput;
  data: InventoryItemTransactionUpdateManyDataInput;
}

export interface InventoryItemTransactionUpdateManyDataInput {
  action?: Maybe<InventoryItemTransactionAction>;
  comment?: Maybe<String>;
}

export interface InventoryItemUpsertWithWhereUniqueNestedInput {
  where: InventoryItemWhereUniqueInput;
  update: InventoryItemUpdateDataInput;
  create: InventoryItemCreateInput;
}

export interface InventoryItemScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  amount?: Maybe<Float>;
  amount_not?: Maybe<Float>;
  amount_in?: Maybe<Float[] | Float>;
  amount_not_in?: Maybe<Float[] | Float>;
  amount_lt?: Maybe<Float>;
  amount_lte?: Maybe<Float>;
  amount_gt?: Maybe<Float>;
  amount_gte?: Maybe<Float>;
  AND?: Maybe<InventoryItemScalarWhereInput[] | InventoryItemScalarWhereInput>;
  OR?: Maybe<InventoryItemScalarWhereInput[] | InventoryItemScalarWhereInput>;
  NOT?: Maybe<InventoryItemScalarWhereInput[] | InventoryItemScalarWhereInput>;
}

export interface InventoryItemUpdateManyWithWhereNestedInput {
  where: InventoryItemScalarWhereInput;
  data: InventoryItemUpdateManyDataInput;
}

export interface InventoryItemUpdateManyDataInput {
  amount?: Maybe<Float>;
}

export interface UserUpsertWithoutProductsInput {
  update: UserUpdateWithoutProductsDataInput;
  create: UserCreateWithoutProductsInput;
}

export interface ProductUpsertNestedInput {
  update: ProductUpdateDataInput;
  create: ProductCreateInput;
}

export interface InventoryItemUpsertWithWhereUniqueWithoutInventoryInput {
  where: InventoryItemWhereUniqueInput;
  update: InventoryItemUpdateWithoutInventoryDataInput;
  create: InventoryItemCreateWithoutInventoryInput;
}

export interface InventoryUpsertWithWhereUniqueWithoutUserInput {
  where: InventoryWhereUniqueInput;
  update: InventoryUpdateWithoutUserDataInput;
  create: InventoryCreateWithoutUserInput;
}

export interface InventoryScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<InventoryScalarWhereInput[] | InventoryScalarWhereInput>;
  OR?: Maybe<InventoryScalarWhereInput[] | InventoryScalarWhereInput>;
  NOT?: Maybe<InventoryScalarWhereInput[] | InventoryScalarWhereInput>;
}

export interface InventoryUpdateManyWithWhereNestedInput {
  where: InventoryScalarWhereInput;
  data: InventoryUpdateManyDataInput;
}

export interface InventoryUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface UserUpsertWithoutCategoriesInput {
  update: UserUpdateWithoutCategoriesDataInput;
  create: UserCreateWithoutCategoriesInput;
}

export interface CategoryUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface CustomerUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutCustomersInput>;
  name?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  street1?: Maybe<String>;
  street2?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  zipCode?: Maybe<String>;
  country?: Maybe<String>;
}

export interface CustomerUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  street1?: Maybe<String>;
  street2?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  zipCode?: Maybe<String>;
  country?: Maybe<String>;
}

export interface InventoryCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutInventoriesInput;
  name: String;
  inventoryItems?: Maybe<InventoryItemCreateManyWithoutInventoryInput>;
}

export interface InventoryUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutInventoriesInput>;
  name?: Maybe<String>;
  inventoryItems?: Maybe<InventoryItemUpdateManyWithoutInventoryInput>;
}

export interface InventoryUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface InventoryItemUpdateInput {
  product?: Maybe<ProductUpdateOneRequiredInput>;
  inventory?: Maybe<InventoryUpdateOneRequiredWithoutInventoryItemsInput>;
  amount?: Maybe<Float>;
  transactions?: Maybe<InventoryItemTransactionUpdateManyInput>;
}

export interface InventoryItemUpdateManyMutationInput {
  amount?: Maybe<Float>;
}

export interface InventoryItemTransactionUpdateInput {
  actor?: Maybe<UserUpdateOneRequiredInput>;
  action?: Maybe<InventoryItemTransactionAction>;
  comment?: Maybe<String>;
}

export interface InventoryItemTransactionUpdateManyMutationInput {
  action?: Maybe<InventoryItemTransactionAction>;
  comment?: Maybe<String>;
}

export interface ProductUpdateInput {
  name?: Maybe<String>;
  salePrice?: Maybe<String>;
  costPrice?: Maybe<String>;
  unit?: Maybe<String>;
  currency?: Maybe<String>;
  notes?: Maybe<String>;
  sku?: Maybe<String>;
  image?: Maybe<String>;
  largeImage?: Maybe<String>;
  categories?: Maybe<ProductUpdatecategoriesInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutProductsInput>;
}

export interface ProductUpdateManyMutationInput {
  name?: Maybe<String>;
  salePrice?: Maybe<String>;
  costPrice?: Maybe<String>;
  unit?: Maybe<String>;
  currency?: Maybe<String>;
  notes?: Maybe<String>;
  sku?: Maybe<String>;
  image?: Maybe<String>;
  largeImage?: Maybe<String>;
  categories?: Maybe<ProductUpdatecategoriesInput>;
}

export interface SaleUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutSalesInput>;
  customer?: Maybe<CustomerUpdateOneInput>;
  timestamp?: Maybe<Int>;
  discountType?: Maybe<SpecialSaleDeductionType>;
  discountValue?: Maybe<String>;
  taxType?: Maybe<SpecialSaleDeductionType>;
  taxValue?: Maybe<String>;
  shipping?: Maybe<String>;
  note?: Maybe<String>;
}

export interface SaleUpdateManyMutationInput {
  timestamp?: Maybe<Int>;
  discountType?: Maybe<SpecialSaleDeductionType>;
  discountValue?: Maybe<String>;
  taxType?: Maybe<SpecialSaleDeductionType>;
  taxValue?: Maybe<String>;
  shipping?: Maybe<String>;
  note?: Maybe<String>;
}

export interface SaleItemUpdateInput {
  sale?: Maybe<SaleUpdateOneRequiredInput>;
  product?: Maybe<ProductUpdateOneRequiredInput>;
  quantity?: Maybe<String>;
  discountType?: Maybe<SpecialSaleDeductionType>;
  discountValue?: Maybe<String>;
}

export interface SaleItemUpdateManyMutationInput {
  quantity?: Maybe<String>;
  discountType?: Maybe<SpecialSaleDeductionType>;
  discountValue?: Maybe<String>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<String>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
  verified?: Maybe<Boolean>;
  name?: Maybe<String>;
  confirmEmailToken?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  products?: Maybe<ProductUpdateManyWithoutUserInput>;
  categories?: Maybe<CategoryUpdateManyWithoutUserInput>;
  inventories?: Maybe<InventoryUpdateManyWithoutUserInput>;
  inventoryItems?: Maybe<InventoryItemUpdateManyInput>;
  customers?: Maybe<CustomerUpdateManyWithoutUserInput>;
  sales?: Maybe<SaleUpdateManyWithoutUserInput>;
  saleItems?: Maybe<SaleItemUpdateManyInput>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<String>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
  verified?: Maybe<Boolean>;
  name?: Maybe<String>;
  confirmEmailToken?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
}

export interface CategorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CategoryWhereInput>;
  AND?: Maybe<
    CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  >;
  OR?: Maybe<CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput>;
  NOT?: Maybe<
    CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  >;
}

export interface CustomerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CustomerWhereInput>;
  AND?: Maybe<
    CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput
  >;
  OR?: Maybe<CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput>;
  NOT?: Maybe<
    CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput
  >;
}

export interface InventorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<InventoryWhereInput>;
  AND?: Maybe<
    InventorySubscriptionWhereInput[] | InventorySubscriptionWhereInput
  >;
  OR?: Maybe<
    InventorySubscriptionWhereInput[] | InventorySubscriptionWhereInput
  >;
  NOT?: Maybe<
    InventorySubscriptionWhereInput[] | InventorySubscriptionWhereInput
  >;
}

export interface InventoryItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<InventoryItemWhereInput>;
  AND?: Maybe<
    InventoryItemSubscriptionWhereInput[] | InventoryItemSubscriptionWhereInput
  >;
  OR?: Maybe<
    InventoryItemSubscriptionWhereInput[] | InventoryItemSubscriptionWhereInput
  >;
  NOT?: Maybe<
    InventoryItemSubscriptionWhereInput[] | InventoryItemSubscriptionWhereInput
  >;
}

export interface InventoryItemTransactionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<InventoryItemTransactionWhereInput>;
  AND?: Maybe<
    | InventoryItemTransactionSubscriptionWhereInput[]
    | InventoryItemTransactionSubscriptionWhereInput
  >;
  OR?: Maybe<
    | InventoryItemTransactionSubscriptionWhereInput[]
    | InventoryItemTransactionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | InventoryItemTransactionSubscriptionWhereInput[]
    | InventoryItemTransactionSubscriptionWhereInput
  >;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductWhereInput>;
  AND?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  OR?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  NOT?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
}

export interface SaleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SaleWhereInput>;
  AND?: Maybe<SaleSubscriptionWhereInput[] | SaleSubscriptionWhereInput>;
  OR?: Maybe<SaleSubscriptionWhereInput[] | SaleSubscriptionWhereInput>;
  NOT?: Maybe<SaleSubscriptionWhereInput[] | SaleSubscriptionWhereInput>;
}

export interface SaleItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SaleItemWhereInput>;
  AND?: Maybe<
    SaleItemSubscriptionWhereInput[] | SaleItemSubscriptionWhereInput
  >;
  OR?: Maybe<SaleItemSubscriptionWhereInput[] | SaleItemSubscriptionWhereInput>;
  NOT?: Maybe<
    SaleItemSubscriptionWhereInput[] | SaleItemSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Category {
  id: ID_Output;
  name: String;
}

export interface CategoryPromise extends Promise<Category>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface CategorySubscription
  extends Promise<AsyncIterator<Category>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
}

export interface CategoryNullablePromise
  extends Promise<Category | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  role: String;
  permissions: Permission[];
  verified: Boolean;
  name?: String;
  confirmEmailToken?: String;
  resetToken?: String;
  resetTokenExpiry?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<String>;
  permissions: () => Promise<Permission[]>;
  verified: () => Promise<Boolean>;
  name: () => Promise<String>;
  confirmEmailToken: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<String>;
  products: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  categories: <T = FragmentableArray<Category>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  inventories: <T = FragmentableArray<Inventory>>(args?: {
    where?: InventoryWhereInput;
    orderBy?: InventoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  inventoryItems: <T = FragmentableArray<InventoryItem>>(args?: {
    where?: InventoryItemWhereInput;
    orderBy?: InventoryItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  customers: <T = FragmentableArray<Customer>>(args?: {
    where?: CustomerWhereInput;
    orderBy?: CustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sales: <T = FragmentableArray<Sale>>(args?: {
    where?: SaleWhereInput;
    orderBy?: SaleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  saleItems: <T = FragmentableArray<SaleItem>>(args?: {
    where?: SaleItemWhereInput;
    orderBy?: SaleItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
  verified: () => Promise<AsyncIterator<Boolean>>;
  name: () => Promise<AsyncIterator<String>>;
  confirmEmailToken: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<String>>;
  products: <T = Promise<AsyncIterator<ProductSubscription>>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  categories: <T = Promise<AsyncIterator<CategorySubscription>>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  inventories: <T = Promise<AsyncIterator<InventorySubscription>>>(args?: {
    where?: InventoryWhereInput;
    orderBy?: InventoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  inventoryItems: <
    T = Promise<AsyncIterator<InventoryItemSubscription>>
  >(args?: {
    where?: InventoryItemWhereInput;
    orderBy?: InventoryItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  customers: <T = Promise<AsyncIterator<CustomerSubscription>>>(args?: {
    where?: CustomerWhereInput;
    orderBy?: CustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sales: <T = Promise<AsyncIterator<SaleSubscription>>>(args?: {
    where?: SaleWhereInput;
    orderBy?: SaleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  saleItems: <T = Promise<AsyncIterator<SaleItemSubscription>>>(args?: {
    where?: SaleItemWhereInput;
    orderBy?: SaleItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<String>;
  permissions: () => Promise<Permission[]>;
  verified: () => Promise<Boolean>;
  name: () => Promise<String>;
  confirmEmailToken: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<String>;
  products: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  categories: <T = FragmentableArray<Category>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  inventories: <T = FragmentableArray<Inventory>>(args?: {
    where?: InventoryWhereInput;
    orderBy?: InventoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  inventoryItems: <T = FragmentableArray<InventoryItem>>(args?: {
    where?: InventoryItemWhereInput;
    orderBy?: InventoryItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  customers: <T = FragmentableArray<Customer>>(args?: {
    where?: CustomerWhereInput;
    orderBy?: CustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sales: <T = FragmentableArray<Sale>>(args?: {
    where?: SaleWhereInput;
    orderBy?: SaleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  saleItems: <T = FragmentableArray<SaleItem>>(args?: {
    where?: SaleItemWhereInput;
    orderBy?: SaleItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Product {
  id: ID_Output;
  name: String;
  salePrice: String;
  costPrice?: String;
  unit?: String;
  currency?: String;
  notes?: String;
  sku?: String;
  image?: String;
  largeImage?: String;
  categories: String[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  salePrice: () => Promise<String>;
  costPrice: () => Promise<String>;
  unit: () => Promise<String>;
  currency: () => Promise<String>;
  notes: () => Promise<String>;
  sku: () => Promise<String>;
  image: () => Promise<String>;
  largeImage: () => Promise<String>;
  categories: () => Promise<String[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  salePrice: () => Promise<AsyncIterator<String>>;
  costPrice: () => Promise<AsyncIterator<String>>;
  unit: () => Promise<AsyncIterator<String>>;
  currency: () => Promise<AsyncIterator<String>>;
  notes: () => Promise<AsyncIterator<String>>;
  sku: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  largeImage: () => Promise<AsyncIterator<String>>;
  categories: () => Promise<AsyncIterator<String[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  user: <T = UserSubscription>() => T;
}

export interface ProductNullablePromise
  extends Promise<Product | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  salePrice: () => Promise<String>;
  costPrice: () => Promise<String>;
  unit: () => Promise<String>;
  currency: () => Promise<String>;
  notes: () => Promise<String>;
  sku: () => Promise<String>;
  image: () => Promise<String>;
  largeImage: () => Promise<String>;
  categories: () => Promise<String[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
}

export interface Inventory {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface InventoryPromise extends Promise<Inventory>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  name: () => Promise<String>;
  inventoryItems: <T = FragmentableArray<InventoryItem>>(args?: {
    where?: InventoryItemWhereInput;
    orderBy?: InventoryItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface InventorySubscription
  extends Promise<AsyncIterator<Inventory>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  inventoryItems: <
    T = Promise<AsyncIterator<InventoryItemSubscription>>
  >(args?: {
    where?: InventoryItemWhereInput;
    orderBy?: InventoryItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface InventoryNullablePromise
  extends Promise<Inventory | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  name: () => Promise<String>;
  inventoryItems: <T = FragmentableArray<InventoryItem>>(args?: {
    where?: InventoryItemWhereInput;
    orderBy?: InventoryItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface InventoryItem {
  id: ID_Output;
  amount?: Float;
}

export interface InventoryItemPromise
  extends Promise<InventoryItem>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  product: <T = ProductPromise>() => T;
  inventory: <T = InventoryPromise>() => T;
  amount: () => Promise<Float>;
  transactions: <T = FragmentableArray<InventoryItemTransaction>>(args?: {
    where?: InventoryItemTransactionWhereInput;
    orderBy?: InventoryItemTransactionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface InventoryItemSubscription
  extends Promise<AsyncIterator<InventoryItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  product: <T = ProductSubscription>() => T;
  inventory: <T = InventorySubscription>() => T;
  amount: () => Promise<AsyncIterator<Float>>;
  transactions: <
    T = Promise<AsyncIterator<InventoryItemTransactionSubscription>>
  >(args?: {
    where?: InventoryItemTransactionWhereInput;
    orderBy?: InventoryItemTransactionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface InventoryItemNullablePromise
  extends Promise<InventoryItem | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  product: <T = ProductPromise>() => T;
  inventory: <T = InventoryPromise>() => T;
  amount: () => Promise<Float>;
  transactions: <T = FragmentableArray<InventoryItemTransaction>>(args?: {
    where?: InventoryItemTransactionWhereInput;
    orderBy?: InventoryItemTransactionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface InventoryItemTransaction {
  id: ID_Output;
  action: InventoryItemTransactionAction;
  comment?: String;
  dateTime: DateTimeOutput;
}

export interface InventoryItemTransactionPromise
  extends Promise<InventoryItemTransaction>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  actor: <T = UserPromise>() => T;
  action: () => Promise<InventoryItemTransactionAction>;
  comment: () => Promise<String>;
  dateTime: () => Promise<DateTimeOutput>;
}

export interface InventoryItemTransactionSubscription
  extends Promise<AsyncIterator<InventoryItemTransaction>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  actor: <T = UserSubscription>() => T;
  action: () => Promise<AsyncIterator<InventoryItemTransactionAction>>;
  comment: () => Promise<AsyncIterator<String>>;
  dateTime: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface InventoryItemTransactionNullablePromise
  extends Promise<InventoryItemTransaction | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  actor: <T = UserPromise>() => T;
  action: () => Promise<InventoryItemTransactionAction>;
  comment: () => Promise<String>;
  dateTime: () => Promise<DateTimeOutput>;
}

export interface Customer {
  id: ID_Output;
  name: String;
  email?: String;
  phone?: String;
  street1?: String;
  street2?: String;
  city?: String;
  state?: String;
  zipCode?: String;
  country?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CustomerPromise extends Promise<Customer>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  name: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  street1: () => Promise<String>;
  street2: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  zipCode: () => Promise<String>;
  country: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CustomerSubscription
  extends Promise<AsyncIterator<Customer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  street1: () => Promise<AsyncIterator<String>>;
  street2: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  zipCode: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CustomerNullablePromise
  extends Promise<Customer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  name: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  street1: () => Promise<String>;
  street2: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  zipCode: () => Promise<String>;
  country: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Sale {
  id: ID_Output;
  timestamp: Int;
  discountType?: SpecialSaleDeductionType;
  discountValue?: String;
  taxType?: SpecialSaleDeductionType;
  taxValue?: String;
  shipping?: String;
  note?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SalePromise extends Promise<Sale>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  customer: <T = CustomerPromise>() => T;
  timestamp: () => Promise<Int>;
  discountType: () => Promise<SpecialSaleDeductionType>;
  discountValue: () => Promise<String>;
  taxType: () => Promise<SpecialSaleDeductionType>;
  taxValue: () => Promise<String>;
  shipping: () => Promise<String>;
  note: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SaleSubscription
  extends Promise<AsyncIterator<Sale>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  customer: <T = CustomerSubscription>() => T;
  timestamp: () => Promise<AsyncIterator<Int>>;
  discountType: () => Promise<AsyncIterator<SpecialSaleDeductionType>>;
  discountValue: () => Promise<AsyncIterator<String>>;
  taxType: () => Promise<AsyncIterator<SpecialSaleDeductionType>>;
  taxValue: () => Promise<AsyncIterator<String>>;
  shipping: () => Promise<AsyncIterator<String>>;
  note: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SaleNullablePromise
  extends Promise<Sale | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  customer: <T = CustomerPromise>() => T;
  timestamp: () => Promise<Int>;
  discountType: () => Promise<SpecialSaleDeductionType>;
  discountValue: () => Promise<String>;
  taxType: () => Promise<SpecialSaleDeductionType>;
  taxValue: () => Promise<String>;
  shipping: () => Promise<String>;
  note: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SaleItem {
  id: ID_Output;
  quantity: String;
  discountType?: SpecialSaleDeductionType;
  discountValue?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SaleItemPromise extends Promise<SaleItem>, Fragmentable {
  id: () => Promise<ID_Output>;
  sale: <T = SalePromise>() => T;
  product: <T = ProductPromise>() => T;
  quantity: () => Promise<String>;
  discountType: () => Promise<SpecialSaleDeductionType>;
  discountValue: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SaleItemSubscription
  extends Promise<AsyncIterator<SaleItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sale: <T = SaleSubscription>() => T;
  product: <T = ProductSubscription>() => T;
  quantity: () => Promise<AsyncIterator<String>>;
  discountType: () => Promise<AsyncIterator<SpecialSaleDeductionType>>;
  discountValue: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SaleItemNullablePromise
  extends Promise<SaleItem | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sale: <T = SalePromise>() => T;
  product: <T = ProductPromise>() => T;
  quantity: () => Promise<String>;
  discountType: () => Promise<SpecialSaleDeductionType>;
  discountValue: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CategoryConnection {
  pageInfo: PageInfo;
  edges: CategoryEdge[];
}

export interface CategoryConnectionPromise
  extends Promise<CategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CategoryEdge>>() => T;
  aggregate: <T = AggregateCategoryPromise>() => T;
}

export interface CategoryConnectionSubscription
  extends Promise<AsyncIterator<CategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCategorySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CategoryEdge {
  node: Category;
  cursor: String;
}

export interface CategoryEdgePromise
  extends Promise<CategoryEdge>,
    Fragmentable {
  node: <T = CategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CategoryEdgeSubscription
  extends Promise<AsyncIterator<CategoryEdge>>,
    Fragmentable {
  node: <T = CategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCategory {
  count: Int;
}

export interface AggregateCategoryPromise
  extends Promise<AggregateCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCategorySubscription
  extends Promise<AsyncIterator<AggregateCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CustomerConnection {
  pageInfo: PageInfo;
  edges: CustomerEdge[];
}

export interface CustomerConnectionPromise
  extends Promise<CustomerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CustomerEdge>>() => T;
  aggregate: <T = AggregateCustomerPromise>() => T;
}

export interface CustomerConnectionSubscription
  extends Promise<AsyncIterator<CustomerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CustomerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCustomerSubscription>() => T;
}

export interface CustomerEdge {
  node: Customer;
  cursor: String;
}

export interface CustomerEdgePromise
  extends Promise<CustomerEdge>,
    Fragmentable {
  node: <T = CustomerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CustomerEdgeSubscription
  extends Promise<AsyncIterator<CustomerEdge>>,
    Fragmentable {
  node: <T = CustomerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCustomer {
  count: Int;
}

export interface AggregateCustomerPromise
  extends Promise<AggregateCustomer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCustomerSubscription
  extends Promise<AsyncIterator<AggregateCustomer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface InventoryConnection {
  pageInfo: PageInfo;
  edges: InventoryEdge[];
}

export interface InventoryConnectionPromise
  extends Promise<InventoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InventoryEdge>>() => T;
  aggregate: <T = AggregateInventoryPromise>() => T;
}

export interface InventoryConnectionSubscription
  extends Promise<AsyncIterator<InventoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InventoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInventorySubscription>() => T;
}

export interface InventoryEdge {
  node: Inventory;
  cursor: String;
}

export interface InventoryEdgePromise
  extends Promise<InventoryEdge>,
    Fragmentable {
  node: <T = InventoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface InventoryEdgeSubscription
  extends Promise<AsyncIterator<InventoryEdge>>,
    Fragmentable {
  node: <T = InventorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateInventory {
  count: Int;
}

export interface AggregateInventoryPromise
  extends Promise<AggregateInventory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInventorySubscription
  extends Promise<AsyncIterator<AggregateInventory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface InventoryItemConnection {
  pageInfo: PageInfo;
  edges: InventoryItemEdge[];
}

export interface InventoryItemConnectionPromise
  extends Promise<InventoryItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InventoryItemEdge>>() => T;
  aggregate: <T = AggregateInventoryItemPromise>() => T;
}

export interface InventoryItemConnectionSubscription
  extends Promise<AsyncIterator<InventoryItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InventoryItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInventoryItemSubscription>() => T;
}

export interface InventoryItemEdge {
  node: InventoryItem;
  cursor: String;
}

export interface InventoryItemEdgePromise
  extends Promise<InventoryItemEdge>,
    Fragmentable {
  node: <T = InventoryItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface InventoryItemEdgeSubscription
  extends Promise<AsyncIterator<InventoryItemEdge>>,
    Fragmentable {
  node: <T = InventoryItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateInventoryItem {
  count: Int;
}

export interface AggregateInventoryItemPromise
  extends Promise<AggregateInventoryItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInventoryItemSubscription
  extends Promise<AsyncIterator<AggregateInventoryItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface InventoryItemTransactionConnection {
  pageInfo: PageInfo;
  edges: InventoryItemTransactionEdge[];
}

export interface InventoryItemTransactionConnectionPromise
  extends Promise<InventoryItemTransactionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InventoryItemTransactionEdge>>() => T;
  aggregate: <T = AggregateInventoryItemTransactionPromise>() => T;
}

export interface InventoryItemTransactionConnectionSubscription
  extends Promise<AsyncIterator<InventoryItemTransactionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<InventoryItemTransactionEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateInventoryItemTransactionSubscription>() => T;
}

export interface InventoryItemTransactionEdge {
  node: InventoryItemTransaction;
  cursor: String;
}

export interface InventoryItemTransactionEdgePromise
  extends Promise<InventoryItemTransactionEdge>,
    Fragmentable {
  node: <T = InventoryItemTransactionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface InventoryItemTransactionEdgeSubscription
  extends Promise<AsyncIterator<InventoryItemTransactionEdge>>,
    Fragmentable {
  node: <T = InventoryItemTransactionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateInventoryItemTransaction {
  count: Int;
}

export interface AggregateInventoryItemTransactionPromise
  extends Promise<AggregateInventoryItemTransaction>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInventoryItemTransactionSubscription
  extends Promise<AsyncIterator<AggregateInventoryItemTransaction>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductConnection {
  pageInfo: PageInfo;
  edges: ProductEdge[];
}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface ProductEdge {
  node: Product;
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SaleConnection {
  pageInfo: PageInfo;
  edges: SaleEdge[];
}

export interface SaleConnectionPromise
  extends Promise<SaleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SaleEdge>>() => T;
  aggregate: <T = AggregateSalePromise>() => T;
}

export interface SaleConnectionSubscription
  extends Promise<AsyncIterator<SaleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SaleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSaleSubscription>() => T;
}

export interface SaleEdge {
  node: Sale;
  cursor: String;
}

export interface SaleEdgePromise extends Promise<SaleEdge>, Fragmentable {
  node: <T = SalePromise>() => T;
  cursor: () => Promise<String>;
}

export interface SaleEdgeSubscription
  extends Promise<AsyncIterator<SaleEdge>>,
    Fragmentable {
  node: <T = SaleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSale {
  count: Int;
}

export interface AggregateSalePromise
  extends Promise<AggregateSale>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSaleSubscription
  extends Promise<AsyncIterator<AggregateSale>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SaleItemConnection {
  pageInfo: PageInfo;
  edges: SaleItemEdge[];
}

export interface SaleItemConnectionPromise
  extends Promise<SaleItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SaleItemEdge>>() => T;
  aggregate: <T = AggregateSaleItemPromise>() => T;
}

export interface SaleItemConnectionSubscription
  extends Promise<AsyncIterator<SaleItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SaleItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSaleItemSubscription>() => T;
}

export interface SaleItemEdge {
  node: SaleItem;
  cursor: String;
}

export interface SaleItemEdgePromise
  extends Promise<SaleItemEdge>,
    Fragmentable {
  node: <T = SaleItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SaleItemEdgeSubscription
  extends Promise<AsyncIterator<SaleItemEdge>>,
    Fragmentable {
  node: <T = SaleItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSaleItem {
  count: Int;
}

export interface AggregateSaleItemPromise
  extends Promise<AggregateSaleItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSaleItemSubscription
  extends Promise<AsyncIterator<AggregateSaleItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CategorySubscriptionPayload {
  mutation: MutationType;
  node: Category;
  updatedFields: String[];
  previousValues: CategoryPreviousValues;
}

export interface CategorySubscriptionPayloadPromise
  extends Promise<CategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CategoryPreviousValuesPromise>() => T;
}

export interface CategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CategoryPreviousValuesSubscription>() => T;
}

export interface CategoryPreviousValues {
  id: ID_Output;
  name: String;
}

export interface CategoryPreviousValuesPromise
  extends Promise<CategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<CategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface CustomerSubscriptionPayload {
  mutation: MutationType;
  node: Customer;
  updatedFields: String[];
  previousValues: CustomerPreviousValues;
}

export interface CustomerSubscriptionPayloadPromise
  extends Promise<CustomerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CustomerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CustomerPreviousValuesPromise>() => T;
}

export interface CustomerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CustomerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CustomerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CustomerPreviousValuesSubscription>() => T;
}

export interface CustomerPreviousValues {
  id: ID_Output;
  name: String;
  email?: String;
  phone?: String;
  street1?: String;
  street2?: String;
  city?: String;
  state?: String;
  zipCode?: String;
  country?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CustomerPreviousValuesPromise
  extends Promise<CustomerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  street1: () => Promise<String>;
  street2: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  zipCode: () => Promise<String>;
  country: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CustomerPreviousValuesSubscription
  extends Promise<AsyncIterator<CustomerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  street1: () => Promise<AsyncIterator<String>>;
  street2: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  zipCode: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface InventorySubscriptionPayload {
  mutation: MutationType;
  node: Inventory;
  updatedFields: String[];
  previousValues: InventoryPreviousValues;
}

export interface InventorySubscriptionPayloadPromise
  extends Promise<InventorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InventoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InventoryPreviousValuesPromise>() => T;
}

export interface InventorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InventorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InventorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InventoryPreviousValuesSubscription>() => T;
}

export interface InventoryPreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface InventoryPreviousValuesPromise
  extends Promise<InventoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface InventoryPreviousValuesSubscription
  extends Promise<AsyncIterator<InventoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface InventoryItemSubscriptionPayload {
  mutation: MutationType;
  node: InventoryItem;
  updatedFields: String[];
  previousValues: InventoryItemPreviousValues;
}

export interface InventoryItemSubscriptionPayloadPromise
  extends Promise<InventoryItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InventoryItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InventoryItemPreviousValuesPromise>() => T;
}

export interface InventoryItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InventoryItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InventoryItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InventoryItemPreviousValuesSubscription>() => T;
}

export interface InventoryItemPreviousValues {
  id: ID_Output;
  amount?: Float;
}

export interface InventoryItemPreviousValuesPromise
  extends Promise<InventoryItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  amount: () => Promise<Float>;
}

export interface InventoryItemPreviousValuesSubscription
  extends Promise<AsyncIterator<InventoryItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  amount: () => Promise<AsyncIterator<Float>>;
}

export interface InventoryItemTransactionSubscriptionPayload {
  mutation: MutationType;
  node: InventoryItemTransaction;
  updatedFields: String[];
  previousValues: InventoryItemTransactionPreviousValues;
}

export interface InventoryItemTransactionSubscriptionPayloadPromise
  extends Promise<InventoryItemTransactionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InventoryItemTransactionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InventoryItemTransactionPreviousValuesPromise>() => T;
}

export interface InventoryItemTransactionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InventoryItemTransactionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InventoryItemTransactionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <
    T = InventoryItemTransactionPreviousValuesSubscription
  >() => T;
}

export interface InventoryItemTransactionPreviousValues {
  id: ID_Output;
  action: InventoryItemTransactionAction;
  comment?: String;
  dateTime: DateTimeOutput;
}

export interface InventoryItemTransactionPreviousValuesPromise
  extends Promise<InventoryItemTransactionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  action: () => Promise<InventoryItemTransactionAction>;
  comment: () => Promise<String>;
  dateTime: () => Promise<DateTimeOutput>;
}

export interface InventoryItemTransactionPreviousValuesSubscription
  extends Promise<AsyncIterator<InventoryItemTransactionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  action: () => Promise<AsyncIterator<InventoryItemTransactionAction>>;
  comment: () => Promise<AsyncIterator<String>>;
  dateTime: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProductSubscriptionPayload {
  mutation: MutationType;
  node: Product;
  updatedFields: String[];
  previousValues: ProductPreviousValues;
}

export interface ProductSubscriptionPayloadPromise
  extends Promise<ProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValuesPromise>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface ProductPreviousValues {
  id: ID_Output;
  name: String;
  salePrice: String;
  costPrice?: String;
  unit?: String;
  currency?: String;
  notes?: String;
  sku?: String;
  image?: String;
  largeImage?: String;
  categories: String[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProductPreviousValuesPromise
  extends Promise<ProductPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  salePrice: () => Promise<String>;
  costPrice: () => Promise<String>;
  unit: () => Promise<String>;
  currency: () => Promise<String>;
  notes: () => Promise<String>;
  sku: () => Promise<String>;
  image: () => Promise<String>;
  largeImage: () => Promise<String>;
  categories: () => Promise<String[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  salePrice: () => Promise<AsyncIterator<String>>;
  costPrice: () => Promise<AsyncIterator<String>>;
  unit: () => Promise<AsyncIterator<String>>;
  currency: () => Promise<AsyncIterator<String>>;
  notes: () => Promise<AsyncIterator<String>>;
  sku: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  largeImage: () => Promise<AsyncIterator<String>>;
  categories: () => Promise<AsyncIterator<String[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SaleSubscriptionPayload {
  mutation: MutationType;
  node: Sale;
  updatedFields: String[];
  previousValues: SalePreviousValues;
}

export interface SaleSubscriptionPayloadPromise
  extends Promise<SaleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SalePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SalePreviousValuesPromise>() => T;
}

export interface SaleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SaleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SaleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SalePreviousValuesSubscription>() => T;
}

export interface SalePreviousValues {
  id: ID_Output;
  timestamp: Int;
  discountType?: SpecialSaleDeductionType;
  discountValue?: String;
  taxType?: SpecialSaleDeductionType;
  taxValue?: String;
  shipping?: String;
  note?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SalePreviousValuesPromise
  extends Promise<SalePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  timestamp: () => Promise<Int>;
  discountType: () => Promise<SpecialSaleDeductionType>;
  discountValue: () => Promise<String>;
  taxType: () => Promise<SpecialSaleDeductionType>;
  taxValue: () => Promise<String>;
  shipping: () => Promise<String>;
  note: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SalePreviousValuesSubscription
  extends Promise<AsyncIterator<SalePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  timestamp: () => Promise<AsyncIterator<Int>>;
  discountType: () => Promise<AsyncIterator<SpecialSaleDeductionType>>;
  discountValue: () => Promise<AsyncIterator<String>>;
  taxType: () => Promise<AsyncIterator<SpecialSaleDeductionType>>;
  taxValue: () => Promise<AsyncIterator<String>>;
  shipping: () => Promise<AsyncIterator<String>>;
  note: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SaleItemSubscriptionPayload {
  mutation: MutationType;
  node: SaleItem;
  updatedFields: String[];
  previousValues: SaleItemPreviousValues;
}

export interface SaleItemSubscriptionPayloadPromise
  extends Promise<SaleItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SaleItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SaleItemPreviousValuesPromise>() => T;
}

export interface SaleItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SaleItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SaleItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SaleItemPreviousValuesSubscription>() => T;
}

export interface SaleItemPreviousValues {
  id: ID_Output;
  quantity: String;
  discountType?: SpecialSaleDeductionType;
  discountValue?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SaleItemPreviousValuesPromise
  extends Promise<SaleItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  quantity: () => Promise<String>;
  discountType: () => Promise<SpecialSaleDeductionType>;
  discountValue: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SaleItemPreviousValuesSubscription
  extends Promise<AsyncIterator<SaleItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  quantity: () => Promise<AsyncIterator<String>>;
  discountType: () => Promise<AsyncIterator<SpecialSaleDeductionType>>;
  discountValue: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  role: String;
  permissions: Permission[];
  verified: Boolean;
  name?: String;
  confirmEmailToken?: String;
  resetToken?: String;
  resetTokenExpiry?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<String>;
  permissions: () => Promise<Permission[]>;
  verified: () => Promise<Boolean>;
  name: () => Promise<String>;
  confirmEmailToken: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
  verified: () => Promise<AsyncIterator<Boolean>>;
  name: () => Promise<AsyncIterator<String>>;
  confirmEmailToken: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Permission",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Product",
    embedded: false
  },
  {
    name: "Category",
    embedded: false
  },
  {
    name: "Inventory",
    embedded: false
  },
  {
    name: "InventoryItem",
    embedded: false
  },
  {
    name: "InventoryItemTransactionAction",
    embedded: false
  },
  {
    name: "InventoryItemTransaction",
    embedded: false
  },
  {
    name: "Customer",
    embedded: false
  },
  {
    name: "SpecialSaleDeductionType",
    embedded: false
  },
  {
    name: "Sale",
    embedded: false
  },
  {
    name: "SaleItem",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
