# import * from './generated/prisma.graphql'

input SaleItemInput {
  product: SaleItemProductInput!
  quantity: Int!
  salePrice: String!
  costPrice: String
  discountType: SpecialSaleDeductionType
  discountValue: String
}

input InventoryItemInput {
  product: InventoryItemProductInput!
  currentQuantity: Int!
  quantity: Int!
}

input SaleItemProductInput {
  id: String!
  name: String!
  salePrice: String!
  costPrice: String
}

input InventoryItemProductInput {
  id: String!
  name: String!
  unit: String
}

type Mutation {
    signup(email: String!, password: String!, confirmPassword: String!): User!
    confirmEmail(confirmEmailToken: String!, email: String!): User!
    logout: String
    login(email: String!, password: String!): User!
    createProduct(name: String!, salePrice: String!, costPrice: String, sku: String, unit: String, notes: String, image: String, largeImage: String, categories: [String]): Product!
    # createCategory(name: String!): Category!
    createCategories(names: [String!]!): [Category!]!
    updateProduct(id: ID!, name: String, salePrice: String, costPrice: String,  unit: String, notes: String, image: String, largeImage: String, categories: [String]): Product!
    deleteProduct(id: ID!): Product!
    createInventory(name: String!): Inventory!
    updateInventory(id: ID!, name: String): Inventory!
    deleteInventory(id: ID!): Inventory!
    createCustomer(name: String!, email: String, phone: String, street1: String, street2: String, city: String, state: String, zipCode: String, country: String): Customer!
    updateCustomer(id: ID!, name: String, email: String, phone: String, street1: String, street2: String, city: String, state: String, zipCode: String, country: String): Customer!
    deleteCustomer(id: ID!): Customer!
    createSaleAndItems(saleItems: [SaleItemInput!]!, timestamp: Int!, customerId: String, discountType: SpecialSaleDeductionType, discountValue: String, taxType: SpecialSaleDeductionType, taxValue: String, shipping: String, note: String): Sale!
    deleteSaleAndItems(id: ID!): Sale!
    updateSaleAndItems(id: ID!, saleItems: [SaleItemInput!]!, timestamp: Int!, customerId: String, discountType: SpecialSaleDeductionType, discountValue: String, taxType: SpecialSaleDeductionType, taxValue: String, shipping: String, note: String): Sale!
    addInventoryStock(id: ID!, inventoryItems: [InventoryItemInput!]!): Inventory!
    removeInventoryStock(id: ID!, inventoryItems: [InventoryItemInput!]!): Inventory!
    createExpense(name: String!, description: String, cost: String!): Expense!
    updateExpense(id: ID!, name: String, description: String, cost: String): Expense!
    deleteExpense(id: ID!): Expense!
    # requestReset(email: String!): SuccessMessage
    # resetPassword(resetToken: String!, password: String!, confirmPassword: String!): User!
    # updatePermissions(permissions: [Permission], userId: ID!): User
}

type Query {
    me: User
    users: [User]!
    products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, first: Int): [Product]!
    productsByUser(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, first: Int): [Product]!
    productByUser(id: ID!): Product
    categories: [Category]!
    categoriesByUser: [Category]!
    inventoriesByUser(orderBy: InventoryOrderByInput): [Inventory]!
    inventoryAndItemsByUser(id: ID!): Inventory!
    inventoryByUser(id: ID!): Inventory
    customersByUser(orderBy: CustomerOrderByInput): [Customer]!
    # customer(id: ID!): Customer
    salesByUser(orderBy: SaleOrderByInput): [Sale]!
    expensesByUser(orderBy: ExpenseOrderByInput): [Expense]!
    # saleItems(orderBy: SaleItemOrderByInput): [SaleItem]!
}

type User {
  id: ID!
  email: String!
  role: String!
  verified: Boolean!
  name: String
  permissions: [Permission!]!
}

